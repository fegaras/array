Number of nodes =  4
Number of executors =  7
myHadoop: Setting MH_IPOIB_TRANSFORM='s/\([^.]*\).*$/\1.ibnet/' from myhadoop.conf
myHadoop: Setting MH_SCRATCH_DIR=/scratch/$USER/$SLURM_JOBID from myhadoop.conf
myHadoop: Using HADOOP_HOME=/opt/hadoop/2.6.0
myHadoop: Using MH_SCRATCH_DIR=/scratch/fegaras/35191250
myHadoop: Using JAVA_HOME=/lib/jvm/java
myHadoop: Generating Hadoop configuration in directory in /home/fegaras/cometcluster...
myHadoop: Backing up old config dir to /home/fegaras/cometcluster.36...
‘/home/fegaras/cometcluster’ -> ‘/home/fegaras/cometcluster.36’
myHadoop: Designating comet-10-17.ibnet as master node (namenode, secondary namenode, and jobtracker)
myHadoop: The following nodes will be slaves (datanode, tasktracer):
comet-10-17.ibnet
comet-10-27.ibnet
comet-25-20.ibnet
comet-25-25.ibnet
20/08/09 09:07:20 INFO namenode.NameNode: STARTUP_MSG: 
/************************************************************
STARTUP_MSG: Starting NameNode
STARTUP_MSG:   host = comet-10-17.sdsc.edu/198.202.112.163
STARTUP_MSG:   args = [-format]
STARTUP_MSG:   version = 2.6.0
STARTUP_MSG:   classpath = /home/fegaras/cometcluster:/opt/hadoop/2.6.0/share/hadoop/common/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jetty-util-6.1.26.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jetty-6.1.26.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jaxb-api-2.2.2.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/log4j-1.2.17.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-collections-3.2.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jsp-api-2.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/servlet-api-2.5.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-configuration-1.6.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/curator-client-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-compress-1.4.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/guava-11.0.2.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jersey-server-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jsr305-1.3.9.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/asm-3.2.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/xmlenc-0.52.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-logging-1.1.3.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/java-xmlbuilder-0.4.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-codec-1.4.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/hadoop-auth-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jasper-runtime-5.5.23.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jets3t-0.9.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-net-3.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/slf4j-log4j12-1.7.5.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/junit-4.11.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/hadoop-annotations-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/mockito-all-1.8.5.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jaxb-impl-2.2.3-1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-digester-1.8.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jasper-compiler-5.5.23.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jackson-jaxrs-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/curator-recipes-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-cli-1.2.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/apacheds-kerberos-codec-2.0.0-M15.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/stax-api-1.0-2.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/htrace-core-3.0.4.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jackson-xc-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jsch-0.1.42.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/activation-1.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/httpclient-4.2.5.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/apacheds-i18n-2.0.0-M15.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/zookeeper-3.4.6.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-beanutils-core-1.8.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/hamcrest-core-1.3.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/xz-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/gson-2.2.4.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-math3-3.1.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/api-asn1-api-1.0.0-M20.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-httpclient-3.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/curator-framework-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jettison-1.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/netty-3.6.2.Final.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/api-util-1.0.0-M20.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/avro-1.7.4.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jersey-json-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-el-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/slf4j-api-1.7.5.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jersey-core-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-lang-2.6.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/paranamer-2.3.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/protobuf-java-2.5.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/httpcore-4.2.5.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-io-2.4.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/snappy-java-1.0.4.1.jar:/opt/hadoop/2.6.0/share/hadoop/common/lib/commons-beanutils-1.7.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/hadoop-common-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/common/hadoop-common-2.6.0-tests.jar:/opt/hadoop/2.6.0/share/hadoop/common/hadoop-nfs-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jetty-util-6.1.26.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jetty-6.1.26.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/log4j-1.2.17.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jsp-api-2.1.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/servlet-api-2.5.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/guava-11.0.2.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jersey-server-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jsr305-1.3.9.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/asm-3.2.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/xmlenc-0.52.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-logging-1.1.3.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/xercesImpl-2.9.1.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-codec-1.4.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jasper-runtime-5.5.23.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-cli-1.2.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/htrace-core-3.0.4.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/netty-3.6.2.Final.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-daemon-1.0.13.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-el-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/xml-apis-1.3.04.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jersey-core-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-lang-2.6.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/protobuf-java-2.5.0.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/lib/commons-io-2.4.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/hadoop-hdfs-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/hadoop-hdfs-nfs-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/hdfs/hadoop-hdfs-2.6.0-tests.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jetty-util-6.1.26.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jetty-6.1.26.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jersey-guice-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jaxb-api-2.2.2.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/log4j-1.2.17.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-collections-3.2.1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/servlet-api-2.5.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-compress-1.4.1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/guice-servlet-3.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/guava-11.0.2.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jersey-server-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jsr305-1.3.9.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/asm-3.2.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-logging-1.1.3.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jersey-client-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/aopalliance-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-codec-1.4.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jaxb-impl-2.2.3-1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/leveldbjni-all-1.8.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jackson-jaxrs-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-cli-1.2.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/stax-api-1.0-2.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jackson-xc-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/activation-1.1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jline-0.9.94.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/zookeeper-3.4.6.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/xz-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-httpclient-3.1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jettison-1.1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/netty-3.6.2.Final.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jersey-json-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jersey-core-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/guice-3.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-lang-2.6.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/javax.inject-1.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/protobuf-java-2.5.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/lib/commons-io-2.4.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-applications-distributedshell-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-server-tests-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-applications-unmanaged-am-launcher-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-server-nodemanager-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-api-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-server-applicationhistoryservice-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-server-web-proxy-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-client-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-registry-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-server-resourcemanager-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-common-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/yarn/hadoop-yarn-server-common-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/jersey-guice-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/log4j-1.2.17.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/commons-compress-1.4.1.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/guice-servlet-3.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/jersey-server-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/asm-3.2.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/aopalliance-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/junit-4.11.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/hadoop-annotations-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/leveldbjni-all-1.8.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/hamcrest-core-1.3.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/xz-1.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/netty-3.6.2.Final.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/avro-1.7.4.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/jersey-core-1.9.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/guice-3.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/javax.inject-1.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/paranamer-2.3.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/protobuf-java-2.5.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/commons-io-2.4.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/lib/snappy-java-1.0.4.1.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.6.0-tests.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-core-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-plugins-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-common-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-app-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0.jar:/opt/hadoop/2.6.0/share/hadoop/mapreduce/hadoop-mapreduce-client-shuffle-2.6.0.jar:/opt/hadoop/2.6.0/contrib/capacity-scheduler/*.jar
STARTUP_MSG:   build = https://git-wip-us.apache.org/repos/asf/hadoop.git -r e3496499ecb8d220fba99dc5ed4c99c8f9e33bb1; compiled by 'jenkins' on 2014-11-13T21:10Z
STARTUP_MSG:   java = 1.8.0_212
************************************************************/
20/08/09 09:07:20 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]
20/08/09 09:07:20 INFO namenode.NameNode: createNameNode [-format]
20/08/09 09:07:21 WARN common.Util: Path /scratch/fegaras/35191250/namenode_data should be specified as a URI in configuration files. Please update hdfs configuration.
20/08/09 09:07:21 WARN common.Util: Path /scratch/fegaras/35191250/namenode_data should be specified as a URI in configuration files. Please update hdfs configuration.
Formatting using clusterid: CID-56bc3214-8e0d-4fc1-ba57-a84e030ecbac
20/08/09 09:07:21 INFO namenode.FSNamesystem: No KeyProvider found.
20/08/09 09:07:21 INFO namenode.FSNamesystem: fsLock is fair:true
20/08/09 09:07:21 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit=1000
20/08/09 09:07:21 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=true
20/08/09 09:07:21 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.000
20/08/09 09:07:21 INFO blockmanagement.BlockManager: The block deletion will start around 2020 Aug 09 09:07:21
20/08/09 09:07:21 INFO util.GSet: Computing capacity for map BlocksMap
20/08/09 09:07:21 INFO util.GSet: VM type       = 64-bit
20/08/09 09:07:21 INFO util.GSet: 2.0% max memory 958.5 MB = 19.2 MB
20/08/09 09:07:21 INFO util.GSet: capacity      = 2^21 = 2097152 entries
20/08/09 09:07:21 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=false
20/08/09 09:07:21 INFO blockmanagement.BlockManager: defaultReplication         = 3
20/08/09 09:07:21 INFO blockmanagement.BlockManager: maxReplication             = 512
20/08/09 09:07:21 INFO blockmanagement.BlockManager: minReplication             = 1
20/08/09 09:07:21 INFO blockmanagement.BlockManager: maxReplicationStreams      = 2
20/08/09 09:07:21 INFO blockmanagement.BlockManager: shouldCheckForEnoughRacks  = false
20/08/09 09:07:21 INFO blockmanagement.BlockManager: replicationRecheckInterval = 3000
20/08/09 09:07:21 INFO blockmanagement.BlockManager: encryptDataTransfer        = false
20/08/09 09:07:21 INFO blockmanagement.BlockManager: maxNumBlocksToLog          = 1000
20/08/09 09:07:21 INFO namenode.FSNamesystem: fsOwner             = fegaras (auth:SIMPLE)
20/08/09 09:07:21 INFO namenode.FSNamesystem: supergroup          = supergroup
20/08/09 09:07:21 INFO namenode.FSNamesystem: isPermissionEnabled = true
20/08/09 09:07:21 INFO namenode.FSNamesystem: HA Enabled: false
20/08/09 09:07:21 INFO namenode.FSNamesystem: Append Enabled: true
20/08/09 09:07:21 INFO util.GSet: Computing capacity for map INodeMap
20/08/09 09:07:21 INFO util.GSet: VM type       = 64-bit
20/08/09 09:07:21 INFO util.GSet: 1.0% max memory 958.5 MB = 9.6 MB
20/08/09 09:07:21 INFO util.GSet: capacity      = 2^20 = 1048576 entries
20/08/09 09:07:21 INFO namenode.NameNode: Caching file names occuring more than 10 times
20/08/09 09:07:21 INFO util.GSet: Computing capacity for map cachedBlocks
20/08/09 09:07:21 INFO util.GSet: VM type       = 64-bit
20/08/09 09:07:21 INFO util.GSet: 0.25% max memory 958.5 MB = 2.4 MB
20/08/09 09:07:21 INFO util.GSet: capacity      = 2^18 = 262144 entries
20/08/09 09:07:21 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct = 0.9990000128746033
20/08/09 09:07:21 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes = 0
20/08/09 09:07:21 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension     = 30000
20/08/09 09:07:21 INFO namenode.FSNamesystem: Retry cache on namenode is enabled
20/08/09 09:07:21 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis
20/08/09 09:07:21 INFO util.GSet: Computing capacity for map NameNodeRetryCache
20/08/09 09:07:21 INFO util.GSet: VM type       = 64-bit
20/08/09 09:07:21 INFO util.GSet: 0.029999999329447746% max memory 958.5 MB = 294.5 KB
20/08/09 09:07:21 INFO util.GSet: capacity      = 2^15 = 32768 entries
20/08/09 09:07:21 INFO namenode.NNConf: ACLs enabled? false
20/08/09 09:07:21 INFO namenode.NNConf: XAttrs enabled? true
20/08/09 09:07:21 INFO namenode.NNConf: Maximum size of an xattr: 16384
20/08/09 09:07:21 INFO namenode.FSImage: Allocated new BlockPoolId: BP-330063880-198.202.112.163-1596989241573
20/08/09 09:07:21 INFO common.Storage: Storage directory /scratch/fegaras/35191250/namenode_data has been successfully formatted.
20/08/09 09:07:21 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid >= 0
20/08/09 09:07:21 INFO util.ExitUtil: Exiting with status 0
20/08/09 09:07:21 INFO namenode.NameNode: SHUTDOWN_MSG: 
/************************************************************
SHUTDOWN_MSG: Shutting down NameNode at comet-10-17.sdsc.edu/198.202.112.163
************************************************************/
myHadoop:  
myHadoop: Enabling experimental Spark support
myHadoop: Using SPARK_CONF_DIR=/home/fegaras/cometcluster/spark
myHadoop:  
To use Spark, you will want to type the following commands:"
  source /home/fegaras/cometcluster/spark/spark-env.sh
  myspark start
Starting namenodes on [comet-10-17.ibnet]
comet-10-17.ibnet: starting namenode, logging to /scratch/fegaras/35191250/logs/hadoop-fegaras-namenode-comet-10-17.sdsc.edu.out
comet-10-17.ibnet: starting datanode, logging to /scratch/fegaras/35191250/logs/hadoop-fegaras-datanode-comet-10-17.sdsc.edu.out
comet-10-27.ibnet: starting datanode, logging to /scratch/fegaras/35191250/logs/hadoop-fegaras-datanode-comet-10-27.sdsc.edu.out
comet-25-25.ibnet: starting datanode, logging to /scratch/fegaras/35191250/logs/hadoop-fegaras-datanode-comet-25-25.sdsc.edu.out
comet-25-20.ibnet: starting datanode, logging to /scratch/fegaras/35191250/logs/hadoop-fegaras-datanode-comet-25-20.sdsc.edu.out
Starting secondary namenodes [comet-10-17.ibnet]
comet-10-17.ibnet: starting secondarynamenode, logging to /scratch/fegaras/35191250/logs/hadoop-fegaras-secondarynamenode-comet-10-17.sdsc.edu.out
starting org.apache.spark.deploy.master.Master, logging to /scratch/fegaras/35191250/logs/spark-fegaras-org.apache.spark.deploy.master.Master-1-comet-10-17.out
comet-10-27.ibnet: starting org.apache.spark.deploy.worker.Worker, logging to /oasis/projects/nsf/uot143/fegaras/spark-3.0.0-bin-hadoop2.7/logs/spark-fegaras-org.apache.spark.deploy.worker.Worker-1-comet-10-27.sdsc.edu.out
comet-25-25.ibnet: starting org.apache.spark.deploy.worker.Worker, logging to /oasis/projects/nsf/uot143/fegaras/spark-3.0.0-bin-hadoop2.7/logs/spark-fegaras-org.apache.spark.deploy.worker.Worker-1-comet-25-25.sdsc.edu.out
comet-25-20.ibnet: starting org.apache.spark.deploy.worker.Worker, logging to /oasis/projects/nsf/uot143/fegaras/spark-3.0.0-bin-hadoop2.7/logs/spark-fegaras-org.apache.spark.deploy.worker.Worker-1-comet-25-20.sdsc.edu.out
comet-10-17.ibnet: starting org.apache.spark.deploy.worker.Worker, logging to /oasis/projects/nsf/uot143/fegaras/spark-3.0.0-bin-hadoop2.7/logs/spark-fegaras-org.apache.spark.deploy.worker.Worker-1-comet-10-17.sdsc.edu.out
compiling add-tile.scala ...
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        MethodCall(Var(m),
                                                   +,
                                                   List(Var(n)))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(m))),
                                       Var(AA)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(jj))),
                                                     VarPat(n))),
                                       Var(BB)),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        MethodCall(Var(m),
                                                   +,
                                                   List(Var(n)))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(m))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v5),
                                                                                          Var(v6))),
                                                                               MapAccess(Var(v4),
                                                                                         Tuple(List(MethodCall(Var(v5),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v6),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v7),
                                                                                             VarPat(v8),
                                                                                             VarPat(v3))),
                                                                               Var(AA)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v1),
                                                                                                          VarPat(v2))),
                                                                                            VarPat(v4))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v3),
                                                                                        Var(v3)))),
                                                                    Generator(VarPat(v5),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v7)))),
                                                                    Generator(VarPat(v6),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v8)))),
                                                                    Predicate(MethodCall(Var(v1),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v5),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v2),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v6),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(AA)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(jj))),
                                                     VarPat(n))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v13),
                                                                                          Var(v14))),
                                                                               MapAccess(Var(v12),
                                                                                         Tuple(List(MethodCall(Var(v13),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v14),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v15),
                                                                                             VarPat(v16),
                                                                                             VarPat(v11))),
                                                                               Var(BB)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v9),
                                                                                                          VarPat(v10))),
                                                                                            VarPat(v12))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v11),
                                                                                        Var(v11)))),
                                                                    Generator(VarPat(v13),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v15)))),
                                                                    Generator(VarPat(v14),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v16)))),
                                                                    Predicate(MethodCall(Var(v9),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v13),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v10),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v14),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(BB)))),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v21,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(j))),
                                                                                               VarPat(m))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v17),
                                                                                                                          Var(v18))),
                                                                                                               MapAccess(Var(_m),
                                                                                                                         MethodCall(MethodCall(Var(v17),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v18))))))),
                                                                                               List(Generator(VarPat(v17),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v18),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                             VarPat(jj))),
                                                                                               VarPat(n))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v19),
                                                                                                                          Var(v20))),
                                                                                                               MapAccess(Var(_n),
                                                                                                                         MethodCall(MethodCall(Var(v19),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v20))))))),
                                                                                               List(Generator(VarPat(v19),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v20),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(ii),
                                                                                            ==,
                                                                                            List(Var(i)))),
                                                                       Predicate(MethodCall(Var(jj),
                                                                                            ==,
                                                                                            List(Var(j)))),
                                                                       LetBinding(TuplePat(List(TuplePat(List(VarPat(v22),
                                                                                                              VarPat(v23))),
                                                                                                VarPat(v24))),
                                                                                  Tuple(List(Tuple(List(Var(i),
                                                                                                        Var(j))),
                                                                                             MethodCall(Var(m),
                                                                                                        +,
                                                                                                        List(Var(n)))))),
                                                                       AssignQual(MapAccess(Var(v21),
                                                                                            MethodCall(MethodCall(Var(v22),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v23)))),
                                                                                  Var(v24)))),
                                                    Var(v21)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_m))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_n))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_m))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_m)))))))),
                                                                   Nth(Var(AA),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_n))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_n)))))))),
                                                                        Nth(Var(BB),
                                                                            3))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v21,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(VarPat(v25),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v26),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v27),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v28),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v27),
                                                                                            ==,
                                                                                            List(Var(v25)))),
                                                                       Predicate(MethodCall(Var(v28),
                                                                                            ==,
                                                                                            List(Var(v26)))),
                                                                       AssignQual(MapAccess(Var(v21),
                                                                                            MethodCall(MethodCall(Var(v25),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v26)))),
                                                                                  MethodCall(MapAccess(Var(_m),
                                                                                                       MethodCall(MethodCall(Var(v25),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v26)))),
                                                                                             +,
                                                                                             List(MapAccess(Var(_n),
                                                                                                            MethodCall(MethodCall(Var(v27),
                                                                                                                                  *,
                                                                                                                                  List(IntConst(1000))),
                                                                                                                       +,
                                                                                                                       List(Var(v28))))))))),
                                                    Var(v21)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_m))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_n))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_m))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_m)))))))),
                                                                   Nth(Var(AA),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_n))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_n)))))))),
                                                                        Nth(Var(BB),
                                                                            3))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v21,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(VarPat(v25),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v26),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v21),
                                                                                            MethodCall(MethodCall(Var(v25),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v26)))),
                                                                                  MethodCall(MapAccess(Var(_m),
                                                                                                       MethodCall(MethodCall(Var(v25),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v26)))),
                                                                                             +,
                                                                                             List(MapAccess(Var(_n),
                                                                                                            MethodCall(MethodCall(Var(v25),
                                                                                                                                  *,
                                                                                                                                  List(IntConst(1000))),
                                                                                                                       +,
                                                                                                                       List(Var(v26))))))))),
                                                    Var(v21)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_m))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_n))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_m))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_m)))))))),
                                                                   Nth(Var(AA),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_n))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_n)))))))),
                                                                        Nth(Var(BB),
                                                                            3))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      VarPat(_m))),
                                        TuplePat(List(TuplePat(List(VarPat(ii),
                                                                    VarPat(jj))),
                                                      VarPat(_n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v21,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(VarPat(v25),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v26),
                                                                                                Block(List(MethodCall(MapAccess(Var(v21),
                                                                                                                                MethodCall(MethodCall(Var(v25),
                                                                                                                                                      *,
                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                           +,
                                                                                                                                           List(Var(v26)))),
                                                                                                                      =,
                                                                                                                      List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                MethodCall(MethodCall(Var(v25),
                                                                                                                                                                      *,
                                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                                           +,
                                                                                                                                                           List(Var(v26)))),
                                                                                                                                      +,
                                                                                                                                      List(MapAccess(Var(_n),
                                                                                                                                                     MethodCall(MethodCall(Var(v25),
                                                                                                                                                                           *,
                                                                                                                                                                           List(IntConst(1000))),
                                                                                                                                                                +,
                                                                                                                                                                List(Var(v26))))))))))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        MethodCall(IntConst(0),
                                                                                   until,
                                                                                   List(IntConst(1000))))),
                                                              Var(v21)))))))),
                   flatMap(Lambda(TuplePat(List(VarPat(_k), VarPat(x))),
                                  Sequence(List(Var(x)))),
                           MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                 VarPat(j))),
                                                                   VarPat(_m))),
                                                     Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                         Var(j))),
                                                                              Tuple(List(Tuple(List(Var(i),
                                                                                                    Var(j))),
                                                                                         Var(_m)))))))),
                                              Nth(Var(AA), 3)),
                                      join,
                                      List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                      VarPat(jj))),
                                                                        VarPat(_n))),
                                                          Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                              Var(jj))),
                                                                                   Tuple(List(Tuple(List(Var(ii),
                                                                                                         Var(jj))),
                                                                                              Var(_n)))))))),
                                                   Nth(Var(BB), 3))))))))
Parallelized term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      VarPat(_m))),
                                        TuplePat(List(TuplePat(List(VarPat(ii),
                                                                    VarPat(jj))),
                                                      VarPat(_n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v21,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(VarPat(v25),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v26),
                                                                                                Block(List(MethodCall(MapAccess(Var(v21),
                                                                                                                                MethodCall(MethodCall(Var(v25),
                                                                                                                                                      *,
                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                           +,
                                                                                                                                           List(Var(v26)))),
                                                                                                                      =,
                                                                                                                      List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                MethodCall(MethodCall(Var(v25),
                                                                                                                                                                      *,
                                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                                           +,
                                                                                                                                                           List(Var(v26)))),
                                                                                                                                      +,
                                                                                                                                      List(MapAccess(Var(_n),
                                                                                                                                                     MethodCall(MethodCall(Var(v25),
                                                                                                                                                                           *,
                                                                                                                                                                           List(IntConst(1000))),
                                                                                                                                                                +,
                                                                                                                                                                List(Var(v26))))))))))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        MethodCall(MethodCall(IntConst(0),
                                                                                              until,
                                                                                              List(IntConst(1000))),
                                                                                   par,
                                                                                   null))),
                                                              Var(v21)))))))),
                   flatMap(Lambda(TuplePat(List(VarPat(_k), VarPat(x))),
                                  Sequence(List(Var(x)))),
                           MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                 VarPat(j))),
                                                                   VarPat(_m))),
                                                     Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                         Var(j))),
                                                                              Tuple(List(Tuple(List(Var(i),
                                                                                                    Var(j))),
                                                                                         Var(_m)))))))),
                                              Nth(Var(AA), 3)),
                                      join,
                                      List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                      VarPat(jj))),
                                                                        VarPat(_n))),
                                                          Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                              Var(jj))),
                                                                                   Tuple(List(Tuple(List(Var(ii),
                                                                                                         Var(jj))),
                                                                                              Var(_n)))))))),
                                                   Nth(Var(BB), 3))))))))
Scala code:
scala.Tuple3(n, m, AA._3.map(((x$macro$2: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$2 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (_m @ _)) => scala.Tuple2(scala.Tuple2(i, j), scala.Tuple2(scala.Tuple2(i, j), _m))
})).join(BB._3.map(((x$macro$3: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$3 match {
  case scala.Tuple2(scala.Tuple2((ii @ _), (jj @ _)), (_n @ _)) => scala.Tuple2(scala.Tuple2(ii, jj), scala.Tuple2(scala.Tuple2(ii, jj), _n))
}))).map(((x$macro$4: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]) => x$macro$4 match {
  case scala.Tuple2((_k @ _), (x @ _)) => x
})).map(((x$macro$5: scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]) => x$macro$5 match {
  case scala.Tuple2(scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (_m @ _)), scala.Tuple2(scala.Tuple2((ii @ _), (jj @ _)), (_n @ _))) => scala.Tuple2(scala.Tuple2(i, j), {
    val v21 = Array.ofDim[Double](1000000);
    0.until(1000).par.foreach(((v25: Int) => 0.until(1000).foreach(((v26: Int) => v21.update(v25.*(1000).+(v26), _m(v25.*(1000).+(v26)).+(_n(v25.*(1000).+(v26))))))));
    v21
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        MethodCall(Var(m),
                                                   +,
                                                   List(Var(n)))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(m))),
                                       Var(AA)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(jj))),
                                                     VarPat(n))),
                                       Var(BB)),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        MethodCall(Var(m),
                                                   +,
                                                   List(Var(n)))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(m))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v33),
                                                                                          Var(v34))),
                                                                               MapAccess(Var(v32),
                                                                                         Tuple(List(MethodCall(Var(v33),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v34),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v35),
                                                                                             VarPat(v36),
                                                                                             VarPat(v31))),
                                                                               Var(AA)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v29),
                                                                                                          VarPat(v30))),
                                                                                            VarPat(v32))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v31),
                                                                                        Var(v31)))),
                                                                    Generator(VarPat(v33),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v35)))),
                                                                    Generator(VarPat(v34),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v36)))),
                                                                    Predicate(MethodCall(Var(v29),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v33),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v30),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v34),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(AA)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(jj))),
                                                     VarPat(n))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v41),
                                                                                          Var(v42))),
                                                                               MapAccess(Var(v40),
                                                                                         Tuple(List(MethodCall(Var(v41),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v42),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v43),
                                                                                             VarPat(v44),
                                                                                             VarPat(v39))),
                                                                               Var(BB)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v37),
                                                                                                          VarPat(v38))),
                                                                                            VarPat(v40))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v39),
                                                                                        Var(v39)))),
                                                                    Generator(VarPat(v41),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v43)))),
                                                                    Generator(VarPat(v42),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v44)))),
                                                                    Predicate(MethodCall(Var(v37),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v41),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v38),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v42),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(BB)))),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v49,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(j))),
                                                                                               VarPat(m))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v45),
                                                                                                                          Var(v46))),
                                                                                                               MapAccess(Var(_m),
                                                                                                                         MethodCall(MethodCall(Var(v45),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v46))))))),
                                                                                               List(Generator(VarPat(v45),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v46),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                             VarPat(jj))),
                                                                                               VarPat(n))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v47),
                                                                                                                          Var(v48))),
                                                                                                               MapAccess(Var(_n),
                                                                                                                         MethodCall(MethodCall(Var(v47),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v48))))))),
                                                                                               List(Generator(VarPat(v47),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v48),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(ii),
                                                                                            ==,
                                                                                            List(Var(i)))),
                                                                       Predicate(MethodCall(Var(jj),
                                                                                            ==,
                                                                                            List(Var(j)))),
                                                                       LetBinding(TuplePat(List(TuplePat(List(VarPat(v50),
                                                                                                              VarPat(v51))),
                                                                                                VarPat(v52))),
                                                                                  Tuple(List(Tuple(List(Var(i),
                                                                                                        Var(j))),
                                                                                             MethodCall(Var(m),
                                                                                                        +,
                                                                                                        List(Var(n)))))),
                                                                       AssignQual(MapAccess(Var(v49),
                                                                                            MethodCall(MethodCall(Var(v50),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v51)))),
                                                                                  Var(v52)))),
                                                    Var(v49)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_m))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_n))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_m))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_m)))))))),
                                                                   Nth(Var(AA),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_n))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_n)))))))),
                                                                        Nth(Var(BB),
                                                                            3))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v49,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(VarPat(v53),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v54),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v55),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v56),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v55),
                                                                                            ==,
                                                                                            List(Var(v53)))),
                                                                       Predicate(MethodCall(Var(v56),
                                                                                            ==,
                                                                                            List(Var(v54)))),
                                                                       AssignQual(MapAccess(Var(v49),
                                                                                            MethodCall(MethodCall(Var(v53),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v54)))),
                                                                                  MethodCall(MapAccess(Var(_m),
                                                                                                       MethodCall(MethodCall(Var(v53),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v54)))),
                                                                                             +,
                                                                                             List(MapAccess(Var(_n),
                                                                                                            MethodCall(MethodCall(Var(v55),
                                                                                                                                  *,
                                                                                                                                  List(IntConst(1000))),
                                                                                                                       +,
                                                                                                                       List(Var(v56))))))))),
                                                    Var(v49)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_m))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_n))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_m))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_m)))))))),
                                                                   Nth(Var(AA),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_n))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_n)))))))),
                                                                        Nth(Var(BB),
                                                                            3))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v49,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(VarPat(v53),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v54),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v49),
                                                                                            MethodCall(MethodCall(Var(v53),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v54)))),
                                                                                  MethodCall(MapAccess(Var(_m),
                                                                                                       MethodCall(MethodCall(Var(v53),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v54)))),
                                                                                             +,
                                                                                             List(MapAccess(Var(_n),
                                                                                                            MethodCall(MethodCall(Var(v53),
                                                                                                                                  *,
                                                                                                                                  List(IntConst(1000))),
                                                                                                                       +,
                                                                                                                       List(Var(v54))))))))),
                                                    Var(v49)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_m))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_n))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_m))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_m)))))))),
                                                                   Nth(Var(AA),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_n))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_n)))))))),
                                                                        Nth(Var(BB),
                                                                            3))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      VarPat(_m))),
                                        TuplePat(List(TuplePat(List(VarPat(ii),
                                                                    VarPat(jj))),
                                                      VarPat(_n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v49,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(VarPat(v53),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v54),
                                                                                                Block(List(MethodCall(MapAccess(Var(v49),
                                                                                                                                MethodCall(MethodCall(Var(v53),
                                                                                                                                                      *,
                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                           +,
                                                                                                                                           List(Var(v54)))),
                                                                                                                      =,
                                                                                                                      List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                MethodCall(MethodCall(Var(v53),
                                                                                                                                                                      *,
                                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                                           +,
                                                                                                                                                           List(Var(v54)))),
                                                                                                                                      +,
                                                                                                                                      List(MapAccess(Var(_n),
                                                                                                                                                     MethodCall(MethodCall(Var(v53),
                                                                                                                                                                           *,
                                                                                                                                                                           List(IntConst(1000))),
                                                                                                                                                                +,
                                                                                                                                                                List(Var(v54))))))))))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        MethodCall(IntConst(0),
                                                                                   until,
                                                                                   List(IntConst(1000))))),
                                                              Var(v49)))))))),
                   flatMap(Lambda(TuplePat(List(VarPat(_k), VarPat(x))),
                                  Sequence(List(Var(x)))),
                           MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                 VarPat(j))),
                                                                   VarPat(_m))),
                                                     Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                         Var(j))),
                                                                              Tuple(List(Tuple(List(Var(i),
                                                                                                    Var(j))),
                                                                                         Var(_m)))))))),
                                              Nth(Var(AA), 3)),
                                      join,
                                      List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                      VarPat(jj))),
                                                                        VarPat(_n))),
                                                          Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                              Var(jj))),
                                                                                   Tuple(List(Tuple(List(Var(ii),
                                                                                                         Var(jj))),
                                                                                              Var(_n)))))))),
                                                   Nth(Var(BB), 3))))))))
Parallelized term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      VarPat(_m))),
                                        TuplePat(List(TuplePat(List(VarPat(ii),
                                                                    VarPat(jj))),
                                                      VarPat(_n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v49,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(VarPat(v53),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v54),
                                                                                                Block(List(MethodCall(MapAccess(Var(v49),
                                                                                                                                MethodCall(MethodCall(Var(v53),
                                                                                                                                                      *,
                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                           +,
                                                                                                                                           List(Var(v54)))),
                                                                                                                      =,
                                                                                                                      List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                MethodCall(MethodCall(Var(v53),
                                                                                                                                                                      *,
                                                                                                                                                                      List(IntConst(1000))),
                                                                                                                                                           +,
                                                                                                                                                           List(Var(v54)))),
                                                                                                                                      +,
                                                                                                                                      List(MapAccess(Var(_n),
                                                                                                                                                     MethodCall(MethodCall(Var(v53),
                                                                                                                                                                           *,
                                                                                                                                                                           List(IntConst(1000))),
                                                                                                                                                                +,
                                                                                                                                                                List(Var(v54))))))))))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        MethodCall(MethodCall(IntConst(0),
                                                                                              until,
                                                                                              List(IntConst(1000))),
                                                                                   par,
                                                                                   null))),
                                                              Var(v49)))))))),
                   flatMap(Lambda(TuplePat(List(VarPat(_k), VarPat(x))),
                                  Sequence(List(Var(x)))),
                           MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                 VarPat(j))),
                                                                   VarPat(_m))),
                                                     Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                         Var(j))),
                                                                              Tuple(List(Tuple(List(Var(i),
                                                                                                    Var(j))),
                                                                                         Var(_m)))))))),
                                              Nth(Var(AA), 3)),
                                      join,
                                      List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                      VarPat(jj))),
                                                                        VarPat(_n))),
                                                          Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                              Var(jj))),
                                                                                   Tuple(List(Tuple(List(Var(ii),
                                                                                                         Var(jj))),
                                                                                              Var(_n)))))))),
                                                   Nth(Var(BB), 3))))))))
Scala code:
scala.Tuple3(n, m, AA._3.map(((x$macro$49: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$49 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (_m @ _)) => scala.Tuple2(scala.Tuple2(i, j), scala.Tuple2(scala.Tuple2(i, j), _m))
})).join(BB._3.map(((x$macro$50: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$50 match {
  case scala.Tuple2(scala.Tuple2((ii @ _), (jj @ _)), (_n @ _)) => scala.Tuple2(scala.Tuple2(ii, jj), scala.Tuple2(scala.Tuple2(ii, jj), _n))
}))).map(((x$macro$51: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]) => x$macro$51 match {
  case scala.Tuple2((_k @ _), (x @ _)) => x
})).map(((x$macro$52: scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]) => x$macro$52 match {
  case scala.Tuple2(scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (_m @ _)), scala.Tuple2(scala.Tuple2((ii @ _), (jj @ _)), (_n @ _))) => scala.Tuple2(scala.Tuple2(i, j), {
    val v49 = Array.ofDim[Double](1000000);
    0.until(1000).par.foreach(((v53: Int) => 0.until(1000).foreach(((v54: Int) => v49.update(v53.*(1000).+(v54), _m(v53.*(1000).+(v54)).+(_n(v53.*(1000).+(v54))))))));
    v49
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
compiling multiply-tile.scala ...
Term:
Call(rdd,
     List(Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Var(MM)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Var(NN)),
                             LetBinding(VarPat(v),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Lifted term:
Call(rdd,
     List(Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Call(lifted,
                                            List(StringConst("rdd"),
                                                 Var(MM),
                                                 Var(MM)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Call(lifted,
                                            List(StringConst("rdd"),
                                                 Var(NN),
                                                 Var(NN)))),
                             LetBinding(VarPat(v),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Translated comprehension:
Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))), Var(v1)))),
              List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                         VarPat(j))),
                                           TuplePat(List(VarPat(v1))))),
                             MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                 Var(j))),
                                                                      Tuple(List(MethodCall(Var(m),
                                                                                            *,
                                                                                            List(Var(n)))))))),
                                                      List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                               VarPat(k))),
                                                                                                 VarPat(m))),
                                                                                   TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                               VarPat(j))),
                                                                                                 VarPat(n))))),
                                                                     flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                                                  VarPat(x))),
                                                                                    Sequence(List(Var(x)))),
                                                                             MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                                   VarPat(k))),
                                                                                                                     VarPat(m))),
                                                                                                       Sequence(List(Tuple(List(Var(k),
                                                                                                                                Tuple(List(Tuple(List(Var(i),
                                                                                                                                                      Var(k))),
                                                                                                                                           Var(m)))))))),
                                                                                                Var(MM)),
                                                                                        join,
                                                                                        List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                                        VarPat(j))),
                                                                                                                          VarPat(n))),
                                                                                                            Sequence(List(Tuple(List(Var(kk),
                                                                                                                                     Tuple(List(Tuple(List(Var(kk),
                                                                                                                                                           Var(j))),
                                                                                                                                                Var(n)))))))),
                                                                                                     Var(NN)))))))),
                                        reduceByKey,
                                        List(Lambda(TuplePat(List(VarPat(x),
                                                                  VarPat(y))),
                                                    MethodCall(Var(x),
                                                               +,
                                                               List(Var(y)))))))))
Normalized comprehension:
Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))), Var(v1)))),
              List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                         VarPat(j))),
                                           TuplePat(List(VarPat(v1))))),
                             MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                 Var(j))),
                                                                      Tuple(List(MethodCall(Var(m),
                                                                                            *,
                                                                                            List(Var(n)))))))),
                                                      List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                               VarPat(k))),
                                                                                                 VarPat(m))),
                                                                                   TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                               VarPat(j))),
                                                                                                 VarPat(n))))),
                                                                     flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                                                  VarPat(x))),
                                                                                    Sequence(List(Var(x)))),
                                                                             MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                                   VarPat(k))),
                                                                                                                     VarPat(m))),
                                                                                                       Sequence(List(Tuple(List(Var(k),
                                                                                                                                Tuple(List(Tuple(List(Var(i),
                                                                                                                                                      Var(k))),
                                                                                                                                           Var(m)))))))),
                                                                                                Var(MM)),
                                                                                        join,
                                                                                        List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                                        VarPat(j))),
                                                                                                                          VarPat(n))),
                                                                                                            Sequence(List(Tuple(List(Var(kk),
                                                                                                                                     Tuple(List(Tuple(List(Var(kk),
                                                                                                                                                           Var(j))),
                                                                                                                                                Var(n)))))))),
                                                                                                     Var(NN)))))))),
                                        reduceByKey,
                                        List(Lambda(TuplePat(List(VarPat(x),
                                                                  VarPat(y))),
                                                    MethodCall(Var(x),
                                                               +,
                                                               List(Var(y)))))))))
Optimized comprehension:
Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))), Var(v1)))),
              List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                         VarPat(j))),
                                           TuplePat(List(VarPat(v1))))),
                             MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                 Var(j))),
                                                                      Tuple(List(MethodCall(Var(m),
                                                                                            *,
                                                                                            List(Var(n)))))))),
                                                      List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                               VarPat(k))),
                                                                                                 VarPat(m))),
                                                                                   TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                               VarPat(j))),
                                                                                                 VarPat(n))))),
                                                                     flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                                                  VarPat(x))),
                                                                                    Sequence(List(Var(x)))),
                                                                             MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                                   VarPat(k))),
                                                                                                                     VarPat(m))),
                                                                                                       Sequence(List(Tuple(List(Var(k),
                                                                                                                                Tuple(List(Tuple(List(Var(i),
                                                                                                                                                      Var(k))),
                                                                                                                                           Var(m)))))))),
                                                                                                Var(MM)),
                                                                                        join,
                                                                                        List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                                        VarPat(j))),
                                                                                                                          VarPat(n))),
                                                                                                            Sequence(List(Tuple(List(Var(kk),
                                                                                                                                     Tuple(List(Tuple(List(Var(kk),
                                                                                                                                                           Var(j))),
                                                                                                                                                Var(n)))))))),
                                                                                                     Var(NN)))))))),
                                        reduceByKey,
                                        List(Lambda(TuplePat(List(VarPat(x),
                                                                  VarPat(y))),
                                                    MethodCall(Var(x),
                                                               +,
                                                               List(Var(y)))))))))
Final Translated term:
flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i), VarPat(j))),
                             TuplePat(List(VarPat(v1))))),
               Sequence(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        Var(v1)))))),
        MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                            VarPat(k))),
                                                              VarPat(m))),
                                                TuplePat(List(TuplePat(List(VarPat(kk),
                                                                            VarPat(j))),
                                                              VarPat(n))))),
                                  Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                      Var(j))),
                                                           Tuple(List(MethodCall(Var(m),
                                                                                 *,
                                                                                 List(Var(n)))))))))),
                           flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                        VarPat(x))),
                                          Sequence(List(Var(x)))),
                                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                         VarPat(k))),
                                                                           VarPat(m))),
                                                             Sequence(List(Tuple(List(Var(k),
                                                                                      Tuple(List(Tuple(List(Var(i),
                                                                                                            Var(k))),
                                                                                                 Var(m)))))))),
                                                      Var(MM)),
                                              join,
                                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                              VarPat(j))),
                                                                                VarPat(n))),
                                                                  Sequence(List(Tuple(List(Var(kk),
                                                                                           Tuple(List(Tuple(List(Var(kk),
                                                                                                                 Var(j))),
                                                                                                      Var(n)))))))),
                                                           Var(NN)))))),
                   reduceByKey,
                   List(Lambda(TuplePat(List(VarPat(x), VarPat(y))),
                               MethodCall(Var(x), +, List(Var(y)))))))
Parallelized term:
flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i), VarPat(j))),
                             TuplePat(List(VarPat(v1))))),
               Sequence(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        Var(v1)))))),
        MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                            VarPat(k))),
                                                              VarPat(m))),
                                                TuplePat(List(TuplePat(List(VarPat(kk),
                                                                            VarPat(j))),
                                                              VarPat(n))))),
                                  Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                      Var(j))),
                                                           Tuple(List(MethodCall(Var(m),
                                                                                 *,
                                                                                 List(Var(n)))))))))),
                           flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                        VarPat(x))),
                                          Sequence(List(Var(x)))),
                                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                         VarPat(k))),
                                                                           VarPat(m))),
                                                             Sequence(List(Tuple(List(Var(k),
                                                                                      Tuple(List(Tuple(List(Var(i),
                                                                                                            Var(k))),
                                                                                                 Var(m)))))))),
                                                      Var(MM)),
                                              join,
                                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                              VarPat(j))),
                                                                                VarPat(n))),
                                                                  Sequence(List(Tuple(List(Var(kk),
                                                                                           Tuple(List(Tuple(List(Var(kk),
                                                                                                                 Var(j))),
                                                                                                      Var(n)))))))),
                                                           Var(NN)))))),
                   reduceByKey,
                   List(Lambda(TuplePat(List(VarPat(x), VarPat(y))),
                               MethodCall(Var(x), +, List(Var(y)))))))
Scala code:
MM.map(((x$macro$7: scala.Tuple2[scala.Tuple2[Int, Int], Double]) => x$macro$7 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (m @ _)) => scala.Tuple2(k, scala.Tuple2(scala.Tuple2(i, k), m))
})).join(NN.map(((x$macro$8: scala.Tuple2[scala.Tuple2[Int, Int], Double]) => x$macro$8 match {
  case scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (n @ _)) => scala.Tuple2(kk, scala.Tuple2(scala.Tuple2(kk, j), n))
}))).map(((x$macro$9: scala.Tuple2[Int, scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Double], scala.Tuple2[scala.Tuple2[Int, Int], Double]]]) => x$macro$9 match {
  case scala.Tuple2((_k @ _), (x @ _)) => x
})).map(((x$macro$10: scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Double], scala.Tuple2[scala.Tuple2[Int, Int], Double]]) => x$macro$10 match {
  case scala.Tuple2(scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (m @ _)), scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (n @ _))) => scala.Tuple2(scala.Tuple2(i, j), m.*(n))
})).reduceByKey({
  case scala.Tuple2((x @ _), (y @ _)) => x.+(y)
}).map(((x$macro$11: scala.Tuple2[scala.Tuple2[Int, Int], Double]) => x$macro$11 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (v1 @ _)) => scala.Tuple2(scala.Tuple2(i, j), v1)
}))
Scala type: org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Double]]
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(c))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Var(AA)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Var(BB)),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             LetBinding(VarPat(c),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(c))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v6),
                                                                                          Var(v7))),
                                                                               MapAccess(Var(v5),
                                                                                         Tuple(List(MethodCall(Var(v6),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v7),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v8),
                                                                                             VarPat(v9),
                                                                                             VarPat(v4))),
                                                                               Var(AA)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v2),
                                                                                                          VarPat(v3))),
                                                                                            VarPat(v5))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v4),
                                                                                        Var(v4)))),
                                                                    Generator(VarPat(v6),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v8)))),
                                                                    Generator(VarPat(v7),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v9)))),
                                                                    Predicate(MethodCall(Var(v2),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v6),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v3),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v7),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(AA)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v14),
                                                                                          Var(v15))),
                                                                               MapAccess(Var(v13),
                                                                                         Tuple(List(MethodCall(Var(v14),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v15),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v16),
                                                                                             VarPat(v17),
                                                                                             VarPat(v12))),
                                                                               Var(BB)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v10),
                                                                                                          VarPat(v11))),
                                                                                            VarPat(v13))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v12),
                                                                                        Var(v12)))),
                                                                    Generator(VarPat(v14),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v16)))),
                                                                    Generator(VarPat(v15),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v17)))),
                                                                    Predicate(MethodCall(Var(v10),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v14),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v11),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v15),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(BB)))),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             LetBinding(VarPat(c),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v25,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_m))),
                                                                                 Var(__m)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_n))),
                                                                                 Var(__n)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(k))),
                                                                                               VarPat(m))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v18),
                                                                                                                          Var(v19))),
                                                                                                               MapAccess(Var(_m),
                                                                                                                         MethodCall(MethodCall(Var(v18),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v19))))))),
                                                                                               List(Generator(VarPat(v18),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v19),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                             VarPat(j))),
                                                                                               VarPat(n))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v20),
                                                                                                                          Var(v21))),
                                                                                                               MapAccess(Var(_n),
                                                                                                                         MethodCall(MethodCall(Var(v20),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v21))))))),
                                                                                               List(Generator(VarPat(v20),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v21),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(k),
                                                                                            ==,
                                                                                            List(Var(kk)))),
                                                                       LetBinding(VarPat(c),
                                                                                  MethodCall(Var(m),
                                                                                             *,
                                                                                             List(Var(n)))),
                                                                       LetBinding(TuplePat(List(VarPat(v26),
                                                                                                VarPat(v27))),
                                                                                  Tuple(List(Var(i),
                                                                                             Var(j)))),
                                                                       AssignQual(MapAccess(Var(v25),
                                                                                            MethodCall(MethodCall(Var(v26),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v27)))),
                                                                                  MethodCall(MapAccess(Var(v25),
                                                                                                       MethodCall(MethodCall(Var(v26),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v27)))),
                                                                                             +,
                                                                                             List(Var(c)))))),
                                                    Var(v25)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__m),
                                                                    VarPat(__n))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v22))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v23)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v23))),
                                                                                Nth(Var(AA),
                                                                                    3)),
                                                                      Generator(VarPat(v22),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v22),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v24)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v24))),
                                                                                     Nth(Var(BB),
                                                                                         3)),
                                                                           Generator(VarPat(v22),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v25,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_m))),
                                                                                 Var(__m)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_n))),
                                                                                 Var(__n)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v29),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v30),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v31),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v32),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v30),
                                                                                            ==,
                                                                                            List(Var(v31)))),
                                                                       AssignQual(MapAccess(Var(v25),
                                                                                            MethodCall(MethodCall(Var(v29),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v32)))),
                                                                                  MethodCall(MapAccess(Var(v25),
                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v32)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v30)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_n),
                                                                                                                            MethodCall(MethodCall(Var(v31),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v32))))))))))),
                                                    Var(v25)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__m),
                                                                    VarPat(__n))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v22))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v23)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v23))),
                                                                                Nth(Var(AA),
                                                                                    3)),
                                                                      Generator(VarPat(v22),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v22),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v24)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v24))),
                                                                                     Nth(Var(BB),
                                                                                         3)),
                                                                           Generator(VarPat(v22),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v25,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_m))),
                                                                                 Var(__m)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_n))),
                                                                                 Var(__n)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v29),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v30),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v32),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v25),
                                                                                            MethodCall(MethodCall(Var(v29),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v32)))),
                                                                                  MethodCall(MapAccess(Var(v25),
                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v32)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v30)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_n),
                                                                                                                            MethodCall(MethodCall(Var(v30),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v32))))))))))),
                                                    Var(v25)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__m),
                                                                    VarPat(__n))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v22))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v23)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v23))),
                                                                                Nth(Var(AA),
                                                                                    3)),
                                                                      Generator(VarPat(v22),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v22),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v24)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v24))),
                                                                                     Nth(Var(BB),
                                                                                         3)),
                                                                           Generator(VarPat(v22),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__m),
                                                      VarPat(__n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v25,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_m))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_n))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v29),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v30),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v32),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v25),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v32)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v25),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v32)))),
                                                                                                                                                                                             +,
                                                                                                                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                  List(Var(v30)))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_n),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v30),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v32))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))),
                                                                                                    Block(List()))),
                                                                                         Var(__n)))),
                                                                        Var(__m))),
                                                              Var(v25)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(k))),
                                                           VarPat(v23))),
                                             flatMap(Lambda(VarPat(v22),
                                                            Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                Var(v22))),
                                                                                     Tuple(List(Tuple(List(Var(k))),
                                                                                                Var(v23)))))))),
                                                     MethodCall(IntConst(0),
                                                                until,
                                                                List(MethodCall(MethodCall(Var(n),
                                                                                           +,
                                                                                           List(IntConst(999))),
                                                                                /,
                                                                                List(IntConst(1000))))))),
                                      Nth(Var(AA), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                              VarPat(j))),
                                                                VarPat(v24))),
                                                  flatMap(Lambda(VarPat(v22),
                                                                 Sequence(List(Tuple(List(Tuple(List(Var(v22),
                                                                                                     Var(j))),
                                                                                          Tuple(List(Tuple(List(Var(kk))),
                                                                                                     Var(v24)))))))),
                                                          MethodCall(IntConst(0),
                                                                     until,
                                                                     List(MethodCall(MethodCall(Var(m),
                                                                                                +,
                                                                                                List(IntConst(999))),
                                                                                     /,
                                                                                     List(IntConst(1000))))))),
                                           Nth(Var(BB), 3)))))))
Parallelized term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__m),
                                                      VarPat(__n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v25,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_m))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_n))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v29),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v30),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v32),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v25),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v32)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v25),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v32)))),
                                                                                                                                                                                             +,
                                                                                                                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                  List(Var(v30)))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_n),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v30),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v32))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(MethodCall(IntConst(0),
                                                                                                                                    until,
                                                                                                                                    List(IntConst(1000))),
                                                                                                                         par,
                                                                                                                         null))),
                                                                                                    Block(List()))),
                                                                                         Var(__n)))),
                                                                        Var(__m))),
                                                              Var(v25)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(k))),
                                                           VarPat(v23))),
                                             MethodCall(flatMap(Lambda(VarPat(v22),
                                                                       Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                           Var(v22))),
                                                                                                Tuple(List(Tuple(List(Var(k))),
                                                                                                           Var(v23)))))))),
                                                                MethodCall(MethodCall(IntConst(0),
                                                                                      until,
                                                                                      List(MethodCall(MethodCall(Var(n),
                                                                                                                 +,
                                                                                                                 List(IntConst(999))),
                                                                                                      /,
                                                                                                      List(IntConst(1000))))),
                                                                           par,
                                                                           null)),
                                                        toList,
                                                        null)),
                                      Nth(Var(AA), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                              VarPat(j))),
                                                                VarPat(v24))),
                                                  MethodCall(flatMap(Lambda(VarPat(v22),
                                                                            Sequence(List(Tuple(List(Tuple(List(Var(v22),
                                                                                                                Var(j))),
                                                                                                     Tuple(List(Tuple(List(Var(kk))),
                                                                                                                Var(v24)))))))),
                                                                     MethodCall(MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(m),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000))))),
                                                                                par,
                                                                                null)),
                                                             toList,
                                                             null)),
                                           Nth(Var(BB), 3)))))))
Scala code:
scala.Tuple3(n, m, AA._3.flatMap(((x$macro$18: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$18 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (v23 @ _)) => 0.until(n.+(999)./(1000)).par.map(((x$macro$20: Int) => x$macro$20 match {
  case (v22 @ _) => scala.Tuple2(scala.Tuple2(i, v22), scala.Tuple2(k, v23))
})).toList
})).cogroup(BB._3.flatMap(((x$macro$21: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$21 match {
  case scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (v24 @ _)) => 0.until(m.+(999)./(1000)).par.map(((x$macro$23: Int) => x$macro$23 match {
  case (v22 @ _) => scala.Tuple2(scala.Tuple2(v22, j), scala.Tuple2(kk, v24))
})).toList
}))).map(((x$macro$24: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[Iterable[scala.Tuple2[Int, Array[Double]]], Iterable[scala.Tuple2[Int, Array[Double]]]]]) => x$macro$24 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), scala.Tuple2((__m @ _), (__n @ _))) => scala.Tuple2(scala.Tuple2(i, j), {
    val v25 = Array.ofDim[Double](1000000);
    __m.foreach(((x$macro$28: scala.Tuple2[Int, Array[Double]]) => (x$macro$28 match {
      case scala.Tuple2((k1 @ _), (_m @ _)) => __n.foreach(((x$macro$32: scala.Tuple2[Int, Array[Double]]) => (x$macro$32 match {
        case scala.Tuple2((k2 @ _), (_n @ _)) => if (k1.==(k2))
          0.until(1000).par.foreach(((v29: Int) => 0.until(1000).foreach(((v30: Int) => 0.until(1000).foreach(((v32: Int) => v25.update(v29.*(1000).+(v32), v25(v29.*(1000).+(v32)).+(_m(v29.*(1000).+(v30)).*(_n(v30.*(1000).+(v32)))))))))))
        else
          ()
      })))
    })));
    v25
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(c))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Var(AA)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Var(BB)),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             LetBinding(VarPat(c),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(c))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v37),
                                                                                          Var(v38))),
                                                                               MapAccess(Var(v36),
                                                                                         Tuple(List(MethodCall(Var(v37),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v38),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v39),
                                                                                             VarPat(v40),
                                                                                             VarPat(v35))),
                                                                               Var(AA)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v33),
                                                                                                          VarPat(v34))),
                                                                                            VarPat(v36))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v35),
                                                                                        Var(v35)))),
                                                                    Generator(VarPat(v37),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v39)))),
                                                                    Generator(VarPat(v38),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v40)))),
                                                                    Predicate(MethodCall(Var(v33),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v37),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v34),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v38),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(AA)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v45),
                                                                                          Var(v46))),
                                                                               MapAccess(Var(v44),
                                                                                         Tuple(List(MethodCall(Var(v45),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v46),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v47),
                                                                                             VarPat(v48),
                                                                                             VarPat(v43))),
                                                                               Var(BB)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v41),
                                                                                                          VarPat(v42))),
                                                                                            VarPat(v44))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v43),
                                                                                        Var(v43)))),
                                                                    Generator(VarPat(v45),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v47)))),
                                                                    Generator(VarPat(v46),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v48)))),
                                                                    Predicate(MethodCall(Var(v41),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v45),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v42),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v46),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(BB)))),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             LetBinding(VarPat(c),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v56,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_m))),
                                                                                 Var(__m)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_n))),
                                                                                 Var(__n)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(k))),
                                                                                               VarPat(m))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v49),
                                                                                                                          Var(v50))),
                                                                                                               MapAccess(Var(_m),
                                                                                                                         MethodCall(MethodCall(Var(v49),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v50))))))),
                                                                                               List(Generator(VarPat(v49),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v50),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                             VarPat(j))),
                                                                                               VarPat(n))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v51),
                                                                                                                          Var(v52))),
                                                                                                               MapAccess(Var(_n),
                                                                                                                         MethodCall(MethodCall(Var(v51),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v52))))))),
                                                                                               List(Generator(VarPat(v51),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v52),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(k),
                                                                                            ==,
                                                                                            List(Var(kk)))),
                                                                       LetBinding(VarPat(c),
                                                                                  MethodCall(Var(m),
                                                                                             *,
                                                                                             List(Var(n)))),
                                                                       LetBinding(TuplePat(List(VarPat(v57),
                                                                                                VarPat(v58))),
                                                                                  Tuple(List(Var(i),
                                                                                             Var(j)))),
                                                                       AssignQual(MapAccess(Var(v56),
                                                                                            MethodCall(MethodCall(Var(v57),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v58)))),
                                                                                  MethodCall(MapAccess(Var(v56),
                                                                                                       MethodCall(MethodCall(Var(v57),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v58)))),
                                                                                             +,
                                                                                             List(Var(c)))))),
                                                    Var(v56)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__m),
                                                                    VarPat(__n))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v53))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v54)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v54))),
                                                                                Nth(Var(AA),
                                                                                    3)),
                                                                      Generator(VarPat(v53),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v53),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v55)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v55))),
                                                                                     Nth(Var(BB),
                                                                                         3)),
                                                                           Generator(VarPat(v53),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v56,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_m))),
                                                                                 Var(__m)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_n))),
                                                                                 Var(__n)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v60),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v61),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v62),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v63),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v61),
                                                                                            ==,
                                                                                            List(Var(v62)))),
                                                                       AssignQual(MapAccess(Var(v56),
                                                                                            MethodCall(MethodCall(Var(v60),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v63)))),
                                                                                  MethodCall(MapAccess(Var(v56),
                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v63)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v61)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_n),
                                                                                                                            MethodCall(MethodCall(Var(v62),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v63))))))))))),
                                                    Var(v56)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__m),
                                                                    VarPat(__n))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v53))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v54)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v54))),
                                                                                Nth(Var(AA),
                                                                                    3)),
                                                                      Generator(VarPat(v53),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v53),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v55)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v55))),
                                                                                     Nth(Var(BB),
                                                                                         3)),
                                                                           Generator(VarPat(v53),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v56,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_m))),
                                                                                 Var(__m)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_n))),
                                                                                 Var(__n)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v60),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v61),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v63),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v56),
                                                                                            MethodCall(MethodCall(Var(v60),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v63)))),
                                                                                  MethodCall(MapAccess(Var(v56),
                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v63)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v61)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_n),
                                                                                                                            MethodCall(MethodCall(Var(v61),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v63))))))))))),
                                                    Var(v56)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__m),
                                                                    VarPat(__n))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v53))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v54)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v54))),
                                                                                Nth(Var(AA),
                                                                                    3)),
                                                                      Generator(VarPat(v53),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v53),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v55)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v55))),
                                                                                     Nth(Var(BB),
                                                                                         3)),
                                                                           Generator(VarPat(v53),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__m),
                                                      VarPat(__n))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v56,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_m))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_n))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v60),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v61),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v63),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v56),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v63)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v56),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v63)))),
                                                                                                                                                                                             +,
                                                                                                                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v60),
                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                  List(Var(v61)))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_n),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v61),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v63))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))),
                                                                                                    Block(List()))),
                                                                                         Var(__n)))),
                                                                        Var(__m))),
                                                              Var(v56)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(k))),
                                                           VarPat(v54))),
                                             flatMap(Lambda(VarPat(v53),
                                                            Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                Var(v53))),
                                                                                     Tuple(List(Tuple(List(Var(k))),
                                                                                                Var(v54)))))))),
                                                     MethodCall(IntConst(0),
                                                                until,
                                                                List(MethodCall(MethodCall(Var(n),
                                                                                           +,
                                                                                           List(IntConst(999))),
                                                                                /,
                                                                                List(IntConst(1000))))))),
                                      Nth(Var(AA), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                              VarPat(j))),
                                                                VarPat(v55))),
                                                  flatMap(Lambda(VarPat(v53),
                                                                 Sequence(List(Tuple(List(Tuple(List(Var(v53),
                                                                                                     Var(j))),
                                                                                          Tuple(List(Tuple(List(Var(kk))),
                                                                                                     Var(v55)))))))),
                                                          MethodCall(IntConst(0),
                                                                     until,
                                                                     List(MethodCall(MethodCall(Var(m),
                                                                                                +,
                                                                                                List(IntConst(999))),
                                                                                     /,
                                                                                     List(IntConst(1000))))))),
                                           Nth(Var(BB), 3)))))))
Scala code:
scala.Tuple3(n, m, AA._3.flatMap(((x$macro$180: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$180 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (v54 @ _)) => 0.until(n.+(999)./(1000)).map(((x$macro$182: Int) => (x$macro$182 match {
    case (v53 @ _) => scala.Tuple2(scala.Tuple2(i, v53), scala.Tuple2(k, v54))
  })))
})).cogroup(BB._3.flatMap(((x$macro$183: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$183 match {
  case scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (v55 @ _)) => 0.until(m.+(999)./(1000)).map(((x$macro$185: Int) => (x$macro$185 match {
    case (v53 @ _) => scala.Tuple2(scala.Tuple2(v53, j), scala.Tuple2(kk, v55))
  })))
}))).map(((x$macro$186: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[Iterable[scala.Tuple2[Int, Array[Double]]], Iterable[scala.Tuple2[Int, Array[Double]]]]]) => x$macro$186 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), scala.Tuple2((__m @ _), (__n @ _))) => scala.Tuple2(scala.Tuple2(i, j), {
    val v56 = Array.ofDim[Double](1000000);
    __m.foreach(((x$macro$190: scala.Tuple2[Int, Array[Double]]) => (x$macro$190 match {
      case scala.Tuple2((k1 @ _), (_m @ _)) => __n.foreach(((x$macro$194: scala.Tuple2[Int, Array[Double]]) => (x$macro$194 match {
        case scala.Tuple2((k2 @ _), (_n @ _)) => if (k1.==(k2))
          0.until(1000).foreach(((v60: Int) => 0.until(1000).foreach(((v61: Int) => 0.until(1000).foreach(((v63: Int) => v56.update(v60.*(1000).+(v63), v56(v60.*(1000).+(v63)).+(_m(v60.*(1000).+(v61)).*(_n(v61.*(1000).+(v63)))))))))))
        else
          ()
      })))
    })));
    v56
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(c))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Var(AA)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Var(BB)),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             LetBinding(VarPat(c),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(c))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(m))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v68),
                                                                                          Var(v69))),
                                                                               MapAccess(Var(v67),
                                                                                         Tuple(List(MethodCall(Var(v68),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v69),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v70),
                                                                                             VarPat(v71),
                                                                                             VarPat(v66))),
                                                                               Var(AA)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v64),
                                                                                                          VarPat(v65))),
                                                                                            VarPat(v67))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v66),
                                                                                        Var(v66)))),
                                                                    Generator(VarPat(v68),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v70)))),
                                                                    Generator(VarPat(v69),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v71)))),
                                                                    Predicate(MethodCall(Var(v64),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v68),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v65),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v69),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(AA)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(n))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v76),
                                                                                          Var(v77))),
                                                                               MapAccess(Var(v75),
                                                                                         Tuple(List(MethodCall(Var(v76),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v77),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v78),
                                                                                             VarPat(v79),
                                                                                             VarPat(v74))),
                                                                               Var(BB)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v72),
                                                                                                          VarPat(v73))),
                                                                                            VarPat(v75))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v74),
                                                                                        Var(v74)))),
                                                                    Generator(VarPat(v76),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v78)))),
                                                                    Generator(VarPat(v77),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v79)))),
                                                                    Predicate(MethodCall(Var(v72),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v76),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v73),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v77),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(BB)))),
                             Predicate(MethodCall(Var(k),
                                                  ==,
                                                  List(Var(kk)))),
                             LetBinding(VarPat(c),
                                        MethodCall(Var(m),
                                                   *,
                                                   List(Var(n)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(v80), Var(v81))),
                                         Block(List(VarDecl(v92,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(_i),
                                                                                                             VarPat(_k))),
                                                                                               VarPat(_m))),
                                                                                 Var(v90)),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(k))),
                                                                                               VarPat(m))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v82),
                                                                                                                          Var(v83))),
                                                                                                               MapAccess(Var(_m),
                                                                                                                         MethodCall(MethodCall(Var(v82),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v83))))))),
                                                                                               List(Generator(VarPat(v82),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v83),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(_kk),
                                                                                                             VarPat(_j))),
                                                                                               VarPat(_n))),
                                                                                 Var(v91)),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                             VarPat(j))),
                                                                                               VarPat(n))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v84),
                                                                                                                          Var(v85))),
                                                                                                               MapAccess(Var(_n),
                                                                                                                         MethodCall(MethodCall(Var(v84),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v85))))))),
                                                                                               List(Generator(VarPat(v84),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v85),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(k),
                                                                                            ==,
                                                                                            List(Var(kk)))),
                                                                       LetBinding(VarPat(c),
                                                                                  MethodCall(Var(m),
                                                                                             *,
                                                                                             List(Var(n)))),
                                                                       LetBinding(TuplePat(List(VarPat(v93),
                                                                                                VarPat(v94))),
                                                                                  Tuple(List(Var(i),
                                                                                             Var(j)))),
                                                                       AssignQual(MapAccess(Var(v92),
                                                                                            MethodCall(MethodCall(Var(v93),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v94)))),
                                                                                  MethodCall(MapAccess(Var(v92),
                                                                                                       MethodCall(MethodCall(Var(v93),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v94)))),
                                                                                             +,
                                                                                             List(Var(c)))))),
                                                    Var(v92)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(v80),
                                                                    VarPat(v81))),
                                                      TuplePat(List(VarPat(v90),
                                                                    VarPat(v91))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(j))),
                                                                                 Tuple(List(Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                                                Var(k))),
                                                                                                                     Var(_m))))),
                                                                                            Sequence(List(Tuple(List(Tuple(List(Var(kk),
                                                                                                                                Var(j))),
                                                                                                                     Var(_n)))))))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                          VarPat(k))),
                                                                                                            VarPat(_m))),
                                                                                              TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                          VarPat(j))),
                                                                                                            VarPat(_n))))),
                                                                                flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                                                             VarPat(x))),
                                                                                               Sequence(List(Var(x)))),
                                                                                        MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                                              VarPat(k))),
                                                                                                                                VarPat(_m))),
                                                                                                                  Sequence(List(Tuple(List(Var(k),
                                                                                                                                           Tuple(List(Tuple(List(Var(i),
                                                                                                                                                                 Var(k))),
                                                                                                                                                      Var(_m)))))))),
                                                                                                           Nth(Var(AA),
                                                                                                               3)),
                                                                                                   join,
                                                                                                   List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                                                   VarPat(j))),
                                                                                                                                     VarPat(_n))),
                                                                                                                       Sequence(List(Tuple(List(Var(kk),
                                                                                                                                                Tuple(List(Tuple(List(Var(kk),
                                                                                                                                                                      Var(j))),
                                                                                                                                                           Var(_n)))))))),
                                                                                                                Nth(Var(BB),
                                                                                                                    3)))))))),
                                                   reduceByKey,
                                                   List(Lambda(TuplePat(List(TuplePat(List(VarPat(v86),
                                                                                           VarPat(v87))),
                                                                             TuplePat(List(VarPat(v88),
                                                                                           VarPat(v89))))),
                                                               Tuple(List(MethodCall(Var(v86),
                                                                                     ++,
                                                                                     List(Var(v88))),
                                                                          MethodCall(Var(v87),
                                                                                     ++,
                                                                                     List(Var(v89)))))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(v80), Var(v81))),
                                         Block(List(VarDecl(v92,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(_i),
                                                                                                             VarPat(_k))),
                                                                                               VarPat(_m))),
                                                                                 Var(v90)),
                                                                       Generator(VarPat(v96),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v97),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(_kk),
                                                                                                             VarPat(_j))),
                                                                                               VarPat(_n))),
                                                                                 Var(v91)),
                                                                       Generator(VarPat(v98),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v99),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v97),
                                                                                            ==,
                                                                                            List(Var(v98)))),
                                                                       AssignQual(MapAccess(Var(v92),
                                                                                            MethodCall(MethodCall(Var(v96),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v99)))),
                                                                                  MethodCall(MapAccess(Var(v92),
                                                                                                       MethodCall(MethodCall(Var(v96),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v99)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                       MethodCall(MethodCall(Var(v96),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v97)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_n),
                                                                                                                            MethodCall(MethodCall(Var(v98),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v99))))))))))),
                                                    Var(v92)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(v80),
                                                                    VarPat(v81))),
                                                      TuplePat(List(VarPat(v90),
                                                                    VarPat(v91))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(j))),
                                                                                 Tuple(List(Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                                                Var(k))),
                                                                                                                     Var(_m))))),
                                                                                            Sequence(List(Tuple(List(Tuple(List(Var(kk),
                                                                                                                                Var(j))),
                                                                                                                     Var(_n)))))))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                          VarPat(k))),
                                                                                                            VarPat(_m))),
                                                                                              TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                          VarPat(j))),
                                                                                                            VarPat(_n))))),
                                                                                flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                                                             VarPat(x))),
                                                                                               Sequence(List(Var(x)))),
                                                                                        MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                                              VarPat(k))),
                                                                                                                                VarPat(_m))),
                                                                                                                  Sequence(List(Tuple(List(Var(k),
                                                                                                                                           Tuple(List(Tuple(List(Var(i),
                                                                                                                                                                 Var(k))),
                                                                                                                                                      Var(_m)))))))),
                                                                                                           Nth(Var(AA),
                                                                                                               3)),
                                                                                                   join,
                                                                                                   List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                                                   VarPat(j))),
                                                                                                                                     VarPat(_n))),
                                                                                                                       Sequence(List(Tuple(List(Var(kk),
                                                                                                                                                Tuple(List(Tuple(List(Var(kk),
                                                                                                                                                                      Var(j))),
                                                                                                                                                           Var(_n)))))))),
                                                                                                                Nth(Var(BB),
                                                                                                                    3)))))))),
                                                   reduceByKey,
                                                   List(Lambda(TuplePat(List(TuplePat(List(VarPat(v86),
                                                                                           VarPat(v87))),
                                                                             TuplePat(List(VarPat(v88),
                                                                                           VarPat(v89))))),
                                                               Tuple(List(MethodCall(Var(v86),
                                                                                     ++,
                                                                                     List(Var(v88))),
                                                                          MethodCall(Var(v87),
                                                                                     ++,
                                                                                     List(Var(v89)))))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(v80), Var(v81))),
                                         Block(List(VarDecl(v92,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(_i),
                                                                                                             VarPat(_k))),
                                                                                               VarPat(_m))),
                                                                                 Var(v90)),
                                                                       Generator(VarPat(v96),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v97),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(_kk),
                                                                                                             VarPat(_j))),
                                                                                               VarPat(_n))),
                                                                                 Var(v91)),
                                                                       Generator(VarPat(v99),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v92),
                                                                                            MethodCall(MethodCall(Var(v96),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v99)))),
                                                                                  MethodCall(MapAccess(Var(v92),
                                                                                                       MethodCall(MethodCall(Var(v96),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v99)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_m),
                                                                                                                       MethodCall(MethodCall(Var(v96),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v97)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_n),
                                                                                                                            MethodCall(MethodCall(Var(v97),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v99))))))))))),
                                                    Var(v92)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(v80),
                                                                    VarPat(v81))),
                                                      TuplePat(List(VarPat(v90),
                                                                    VarPat(v91))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(j))),
                                                                                 Tuple(List(Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                                                Var(k))),
                                                                                                                     Var(_m))))),
                                                                                            Sequence(List(Tuple(List(Tuple(List(Var(kk),
                                                                                                                                Var(j))),
                                                                                                                     Var(_n)))))))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                          VarPat(k))),
                                                                                                            VarPat(_m))),
                                                                                              TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                          VarPat(j))),
                                                                                                            VarPat(_n))))),
                                                                                flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                                                             VarPat(x))),
                                                                                               Sequence(List(Var(x)))),
                                                                                        MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                                                              VarPat(k))),
                                                                                                                                VarPat(_m))),
                                                                                                                  Sequence(List(Tuple(List(Var(k),
                                                                                                                                           Tuple(List(Tuple(List(Var(i),
                                                                                                                                                                 Var(k))),
                                                                                                                                                      Var(_m)))))))),
                                                                                                           Nth(Var(AA),
                                                                                                               3)),
                                                                                                   join,
                                                                                                   List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                                                   VarPat(j))),
                                                                                                                                     VarPat(_n))),
                                                                                                                       Sequence(List(Tuple(List(Var(kk),
                                                                                                                                                Tuple(List(Tuple(List(Var(kk),
                                                                                                                                                                      Var(j))),
                                                                                                                                                           Var(_n)))))))),
                                                                                                                Nth(Var(BB),
                                                                                                                    3)))))))),
                                                   reduceByKey,
                                                   List(Lambda(TuplePat(List(TuplePat(List(VarPat(v86),
                                                                                           VarPat(v87))),
                                                                             TuplePat(List(VarPat(v88),
                                                                                           VarPat(v89))))),
                                                               Tuple(List(MethodCall(Var(v86),
                                                                                     ++,
                                                                                     List(Var(v88))),
                                                                          MethodCall(Var(v87),
                                                                                     ++,
                                                                                     List(Var(v89)))))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(v80),
                                                      VarPat(v81))),
                                        TuplePat(List(VarPat(v90),
                                                      VarPat(v91))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(v80),
                                                              Var(v81))),
                                                   Block(List(VarDecl(v92,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(TuplePat(List(VarPat(_i),
                                                                                                           VarPat(_k))),
                                                                                             VarPat(_m))),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v96),
                                                                                                Call(foreach,
                                                                                                     List(Lambda(VarPat(v97),
                                                                                                                 Call(foreach,
                                                                                                                      List(Lambda(TuplePat(List(TuplePat(List(VarPat(_kk),
                                                                                                                                                              VarPat(_j))),
                                                                                                                                                VarPat(_n))),
                                                                                                                                  Call(foreach,
                                                                                                                                       List(Lambda(VarPat(v99),
                                                                                                                                                   Block(List(MethodCall(MapAccess(Var(v92),
                                                                                                                                                                                   MethodCall(MethodCall(Var(v96),
                                                                                                                                                                                                         *,
                                                                                                                                                                                                         List(IntConst(1000))),
                                                                                                                                                                                              +,
                                                                                                                                                                                              List(Var(v99)))),
                                                                                                                                                                         =,
                                                                                                                                                                         List(MethodCall(MapAccess(Var(v92),
                                                                                                                                                                                                   MethodCall(MethodCall(Var(v96),
                                                                                                                                                                                                                         *,
                                                                                                                                                                                                                         List(IntConst(1000))),
                                                                                                                                                                                                              +,
                                                                                                                                                                                                              List(Var(v99)))),
                                                                                                                                                                                         +,
                                                                                                                                                                                         List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                                                                                   MethodCall(MethodCall(Var(v96),
                                                                                                                                                                                                                                         *,
                                                                                                                                                                                                                                         List(IntConst(1000))),
                                                                                                                                                                                                                              +,
                                                                                                                                                                                                                              List(Var(v97)))),
                                                                                                                                                                                                         *,
                                                                                                                                                                                                         List(MapAccess(Var(_n),
                                                                                                                                                                                                                        MethodCall(MethodCall(Var(v97),
                                                                                                                                                                                                                                              *,
                                                                                                                                                                                                                                              List(IntConst(1000))),
                                                                                                                                                                                                                                   +,
                                                                                                                                                                                                                                   List(Var(v99))))))))))))),
                                                                                                                                            MethodCall(IntConst(0),
                                                                                                                                                       until,
                                                                                                                                                       List(IntConst(1000)))))),
                                                                                                                           Var(v91)))),
                                                                                                          MethodCall(IntConst(0),
                                                                                                                     until,
                                                                                                                     List(IntConst(1000)))))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        Var(v90))),
                                                              Var(v92)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                       VarPat(k))),
                                                                         VarPat(_m))),
                                                           TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                       VarPat(j))),
                                                                         VarPat(_n))))),
                                             Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                 Var(j))),
                                                                      Tuple(List(Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                                     Var(k))),
                                                                                                          Var(_m))))),
                                                                                 Sequence(List(Tuple(List(Tuple(List(Var(kk),
                                                                                                                     Var(j))),
                                                                                                          Var(_n)))))))))))),
                                      flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                   VarPat(x))),
                                                     Sequence(List(Var(x)))),
                                              MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                    VarPat(k))),
                                                                                      VarPat(_m))),
                                                                        Sequence(List(Tuple(List(Var(k),
                                                                                                 Tuple(List(Tuple(List(Var(i),
                                                                                                                       Var(k))),
                                                                                                            Var(_m)))))))),
                                                                 Nth(Var(AA),
                                                                     3)),
                                                         join,
                                                         List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                         VarPat(j))),
                                                                                           VarPat(_n))),
                                                                             Sequence(List(Tuple(List(Var(kk),
                                                                                                      Tuple(List(Tuple(List(Var(kk),
                                                                                                                            Var(j))),
                                                                                                                 Var(_n)))))))),
                                                                      Nth(Var(BB),
                                                                          3)))))),
                              reduceByKey,
                              List(Lambda(TuplePat(List(TuplePat(List(VarPat(v86),
                                                                      VarPat(v87))),
                                                        TuplePat(List(VarPat(v88),
                                                                      VarPat(v89))))),
                                          Tuple(List(MethodCall(Var(v86),
                                                                ++,
                                                                List(Var(v88))),
                                                     MethodCall(Var(v87),
                                                                ++,
                                                                List(Var(v89)))))))))))
Parallelized term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(v80),
                                                      VarPat(v81))),
                                        TuplePat(List(VarPat(v90),
                                                      VarPat(v91))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(v80),
                                                              Var(v81))),
                                                   Block(List(VarDecl(v92,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(TuplePat(List(VarPat(_i),
                                                                                                           VarPat(_k))),
                                                                                             VarPat(_m))),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v96),
                                                                                                Call(foreach,
                                                                                                     List(Lambda(VarPat(v97),
                                                                                                                 Call(foreach,
                                                                                                                      List(Lambda(TuplePat(List(TuplePat(List(VarPat(_kk),
                                                                                                                                                              VarPat(_j))),
                                                                                                                                                VarPat(_n))),
                                                                                                                                  Call(foreach,
                                                                                                                                       List(Lambda(VarPat(v99),
                                                                                                                                                   Block(List(MethodCall(MapAccess(Var(v92),
                                                                                                                                                                                   MethodCall(MethodCall(Var(v96),
                                                                                                                                                                                                         *,
                                                                                                                                                                                                         List(IntConst(1000))),
                                                                                                                                                                                              +,
                                                                                                                                                                                              List(Var(v99)))),
                                                                                                                                                                         =,
                                                                                                                                                                         List(MethodCall(MapAccess(Var(v92),
                                                                                                                                                                                                   MethodCall(MethodCall(Var(v96),
                                                                                                                                                                                                                         *,
                                                                                                                                                                                                                         List(IntConst(1000))),
                                                                                                                                                                                                              +,
                                                                                                                                                                                                              List(Var(v99)))),
                                                                                                                                                                                         +,
                                                                                                                                                                                         List(MethodCall(MapAccess(Var(_m),
                                                                                                                                                                                                                   MethodCall(MethodCall(Var(v96),
                                                                                                                                                                                                                                         *,
                                                                                                                                                                                                                                         List(IntConst(1000))),
                                                                                                                                                                                                                              +,
                                                                                                                                                                                                                              List(Var(v97)))),
                                                                                                                                                                                                         *,
                                                                                                                                                                                                         List(MapAccess(Var(_n),
                                                                                                                                                                                                                        MethodCall(MethodCall(Var(v97),
                                                                                                                                                                                                                                              *,
                                                                                                                                                                                                                                              List(IntConst(1000))),
                                                                                                                                                                                                                                   +,
                                                                                                                                                                                                                                   List(Var(v99))))))))))))),
                                                                                                                                            MethodCall(IntConst(0),
                                                                                                                                                       until,
                                                                                                                                                       List(IntConst(1000)))))),
                                                                                                                           Var(v91)))),
                                                                                                          MethodCall(IntConst(0),
                                                                                                                     until,
                                                                                                                     List(IntConst(1000)))))),
                                                                                         MethodCall(MethodCall(IntConst(0),
                                                                                                               until,
                                                                                                               List(IntConst(1000))),
                                                                                                    par,
                                                                                                    null)))),
                                                                        Var(v90))),
                                                              Var(v92)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                       VarPat(k))),
                                                                         VarPat(_m))),
                                                           TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                       VarPat(j))),
                                                                         VarPat(_n))))),
                                             Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                 Var(j))),
                                                                      Tuple(List(Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                                     Var(k))),
                                                                                                          Var(_m))))),
                                                                                 Sequence(List(Tuple(List(Tuple(List(Var(kk),
                                                                                                                     Var(j))),
                                                                                                          Var(_n)))))))))))),
                                      flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                   VarPat(x))),
                                                     Sequence(List(Var(x)))),
                                              MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                    VarPat(k))),
                                                                                      VarPat(_m))),
                                                                        Sequence(List(Tuple(List(Var(k),
                                                                                                 Tuple(List(Tuple(List(Var(i),
                                                                                                                       Var(k))),
                                                                                                            Var(_m)))))))),
                                                                 Nth(Var(AA),
                                                                     3)),
                                                         join,
                                                         List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                         VarPat(j))),
                                                                                           VarPat(_n))),
                                                                             Sequence(List(Tuple(List(Var(kk),
                                                                                                      Tuple(List(Tuple(List(Var(kk),
                                                                                                                            Var(j))),
                                                                                                                 Var(_n)))))))),
                                                                      Nth(Var(BB),
                                                                          3)))))),
                              reduceByKey,
                              List(Lambda(TuplePat(List(TuplePat(List(VarPat(v86),
                                                                      VarPat(v87))),
                                                        TuplePat(List(VarPat(v88),
                                                                      VarPat(v89))))),
                                          Tuple(List(MethodCall(Var(v86),
                                                                ++,
                                                                List(Var(v88))),
                                                     MethodCall(Var(v87),
                                                                ++,
                                                                List(Var(v89)))))))))))
Scala code:
scala.Tuple3(n, m, AA._3.map(((x$macro$342: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$342 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (_m @ _)) => scala.Tuple2(k, scala.Tuple2(scala.Tuple2(i, k), _m))
})).join(BB._3.map(((x$macro$343: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$343 match {
  case scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (_n @ _)) => scala.Tuple2(kk, scala.Tuple2(scala.Tuple2(kk, j), _n))
}))).map(((x$macro$344: scala.Tuple2[Int, scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]) => x$macro$344 match {
  case scala.Tuple2((_k @ _), (x @ _)) => x
})).map(((x$macro$345: scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]) => x$macro$345 match {
  case scala.Tuple2(scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (_m @ _)), scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (_n @ _))) => scala.Tuple2(scala.Tuple2(i, j), scala.Tuple2(List(scala.Tuple2(scala.Tuple2(i, k), _m)), List(scala.Tuple2(scala.Tuple2(kk, j), _n))))
})).reduceByKey({
  case scala.Tuple2(scala.Tuple2((v86 @ _), (v87 @ _)), scala.Tuple2((v88 @ _), (v89 @ _))) => scala.Tuple2(v86.++(v88), v87.++(v89))
}).map(((x$macro$346: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[List[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]], List[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]]) => x$macro$346 match {
  case scala.Tuple2(scala.Tuple2((v80 @ _), (v81 @ _)), scala.Tuple2((v90 @ _), (v91 @ _))) => scala.Tuple2(scala.Tuple2(v80, v81), {
    val v92 = Array.ofDim[Double](1000000);
    v90.foreach(((x$macro$350: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => (x$macro$350 match {
      case scala.Tuple2(scala.Tuple2((_i @ _), (_k @ _)), (_m @ _)) => 0.until(1000).par.foreach(((v96: Int) => 0.until(1000).foreach(((v97: Int) => v91.foreach(((x$macro$363: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => (x$macro$363 match {
        case scala.Tuple2(scala.Tuple2((_kk @ _), (_j @ _)), (_n @ _)) => 0.until(1000).foreach(((v99: Int) => v92.update(v96.*(1000).+(v99), v92(v96.*(1000).+(v99)).+(_m(v96.*(1000).+(v97)).*(_n(v97.*(1000).+(v99)))))))
      })))))))
    })));
    v92
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
compiling factorization.scala ...
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(p))),
                                       Var(PP)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(q))),
                                       Var(QQ)),
                             Predicate(MethodCall(Var(kk),
                                                  ==,
                                                  List(Var(k)))),
                             LetBinding(VarPat(v),
                                        MethodCall(Var(p),
                                                   *,
                                                   List(Var(q)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        reduce(+, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(k))),
                                                     VarPat(p))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v5),
                                                                                          Var(v6))),
                                                                               MapAccess(Var(v4),
                                                                                         Tuple(List(MethodCall(Var(v5),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v6),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v7),
                                                                                             VarPat(v8),
                                                                                             VarPat(v3))),
                                                                               Var(PP)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v1),
                                                                                                          VarPat(v2))),
                                                                                            VarPat(v4))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v3),
                                                                                        Var(v3)))),
                                                                    Generator(VarPat(v5),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v7)))),
                                                                    Generator(VarPat(v6),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v8)))),
                                                                    Predicate(MethodCall(Var(v1),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v5),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v2),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v6),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(PP)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                   VarPat(j))),
                                                     VarPat(q))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v13),
                                                                                          Var(v14))),
                                                                               MapAccess(Var(v12),
                                                                                         Tuple(List(MethodCall(Var(v13),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v14),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v15),
                                                                                             VarPat(v16),
                                                                                             VarPat(v11))),
                                                                               Var(QQ)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v9),
                                                                                                          VarPat(v10))),
                                                                                            VarPat(v12))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v11),
                                                                                        Var(v11)))),
                                                                    Generator(VarPat(v13),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v15)))),
                                                                    Generator(VarPat(v14),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v16)))),
                                                                    Predicate(MethodCall(Var(v9),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v13),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v10),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v14),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(QQ)))),
                             Predicate(MethodCall(Var(kk),
                                                  ==,
                                                  List(Var(k)))),
                             LetBinding(VarPat(v),
                                        MethodCall(Var(p),
                                                   *,
                                                   List(Var(q)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(j))),
                                         Tuple(List(Var(i), Var(j))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v24,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_p))),
                                                                                 Var(__p)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_q))),
                                                                                 Var(__q)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(k))),
                                                                                               VarPat(p))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v17),
                                                                                                                          Var(v18))),
                                                                                                               MapAccess(Var(_p),
                                                                                                                         MethodCall(MethodCall(Var(v17),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v18))))))),
                                                                                               List(Generator(VarPat(v17),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v18),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                             VarPat(j))),
                                                                                               VarPat(q))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v19),
                                                                                                                          Var(v20))),
                                                                                                               MapAccess(Var(_q),
                                                                                                                         MethodCall(MethodCall(Var(v19),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v20))))))),
                                                                                               List(Generator(VarPat(v19),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v20),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(kk),
                                                                                            ==,
                                                                                            List(Var(k)))),
                                                                       LetBinding(VarPat(v),
                                                                                  MethodCall(Var(p),
                                                                                             *,
                                                                                             List(Var(q)))),
                                                                       LetBinding(TuplePat(List(VarPat(v25),
                                                                                                VarPat(v26))),
                                                                                  Tuple(List(Var(i),
                                                                                             Var(j)))),
                                                                       AssignQual(MapAccess(Var(v24),
                                                                                            MethodCall(MethodCall(Var(v25),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v26)))),
                                                                                  MethodCall(MapAccess(Var(v24),
                                                                                                       MethodCall(MethodCall(Var(v25),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v26)))),
                                                                                             +,
                                                                                             List(Var(v)))))),
                                                    Var(v24)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__p),
                                                                    VarPat(__q))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v21))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v22)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v22))),
                                                                                Nth(Var(PP),
                                                                                    3)),
                                                                      Generator(VarPat(v21),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v21),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v23)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v23))),
                                                                                     Nth(Var(QQ),
                                                                                         3)),
                                                                           Generator(VarPat(v21),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v24,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_p))),
                                                                                 Var(__p)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_q))),
                                                                                 Var(__q)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v28),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v29),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v30),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v31),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v30),
                                                                                            ==,
                                                                                            List(Var(v29)))),
                                                                       AssignQual(MapAccess(Var(v24),
                                                                                            MethodCall(MethodCall(Var(v28),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v31)))),
                                                                                  MethodCall(MapAccess(Var(v24),
                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v31)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_p),
                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v29)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_q),
                                                                                                                            MethodCall(MethodCall(Var(v30),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v31))))))))))),
                                                    Var(v24)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__p),
                                                                    VarPat(__q))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v21))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v22)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v22))),
                                                                                Nth(Var(PP),
                                                                                    3)),
                                                                      Generator(VarPat(v21),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v21),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v23)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v23))),
                                                                                     Nth(Var(QQ),
                                                                                         3)),
                                                                           Generator(VarPat(v21),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v24,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_p))),
                                                                                 Var(__p)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_q))),
                                                                                 Var(__q)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v28),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v29),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v31),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v24),
                                                                                            MethodCall(MethodCall(Var(v28),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v31)))),
                                                                                  MethodCall(MapAccess(Var(v24),
                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v31)))),
                                                                                             +,
                                                                                             List(MethodCall(MapAccess(Var(_p),
                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                             *,
                                                                                                                                             List(IntConst(1000))),
                                                                                                                                  +,
                                                                                                                                  List(Var(v29)))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_q),
                                                                                                                            MethodCall(MethodCall(Var(v29),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v31))))))))))),
                                                    Var(v24)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__p),
                                                                    VarPat(__q))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v21))),
                                                                                 Tuple(List(Tuple(List(Var(k))),
                                                                                            Var(v22)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(k))),
                                                                                              VarPat(v22))),
                                                                                Nth(Var(PP),
                                                                                    3)),
                                                                      Generator(VarPat(v21),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v21),
                                                                                                 Var(j))),
                                                                                      Tuple(List(Tuple(List(Var(kk))),
                                                                                                 Var(v23)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                                                                 VarPat(j))),
                                                                                                   VarPat(v23))),
                                                                                     Nth(Var(QQ),
                                                                                         3)),
                                                                           Generator(VarPat(v21),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(m),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__p),
                                                      VarPat(__q))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v24,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_p))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_q))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v28),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v29),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v31),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v24),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v31)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v24),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v31)))),
                                                                                                                                                                                             +,
                                                                                                                                                                                             List(MethodCall(MapAccess(Var(_p),
                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                  List(Var(v29)))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_q),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v31))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))),
                                                                                                    Block(List()))),
                                                                                         Var(__q)))),
                                                                        Var(__p))),
                                                              Var(v24)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(k))),
                                                           VarPat(v22))),
                                             flatMap(Lambda(VarPat(v21),
                                                            Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                Var(v21))),
                                                                                     Tuple(List(Tuple(List(Var(k))),
                                                                                                Var(v22)))))))),
                                                     MethodCall(IntConst(0),
                                                                until,
                                                                List(MethodCall(MethodCall(Var(n),
                                                                                           +,
                                                                                           List(IntConst(999))),
                                                                                /,
                                                                                List(IntConst(1000))))))),
                                      Nth(Var(PP), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                              VarPat(j))),
                                                                VarPat(v23))),
                                                  flatMap(Lambda(VarPat(v21),
                                                                 Sequence(List(Tuple(List(Tuple(List(Var(v21),
                                                                                                     Var(j))),
                                                                                          Tuple(List(Tuple(List(Var(kk))),
                                                                                                     Var(v23)))))))),
                                                          MethodCall(IntConst(0),
                                                                     until,
                                                                     List(MethodCall(MethodCall(Var(m),
                                                                                                +,
                                                                                                List(IntConst(999))),
                                                                                     /,
                                                                                     List(IntConst(1000))))))),
                                           Nth(Var(QQ), 3)))))))
Parallelized term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__p),
                                                      VarPat(__q))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v24,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_p))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_q))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v28),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v29),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v31),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v24),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v31)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v24),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v31)))),
                                                                                                                                                                                             +,
                                                                                                                                                                                             List(MethodCall(MapAccess(Var(_p),
                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v28),
                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                  List(Var(v29)))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_q),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v29),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v31))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(MethodCall(IntConst(0),
                                                                                                                                    until,
                                                                                                                                    List(IntConst(1000))),
                                                                                                                         par,
                                                                                                                         null))),
                                                                                                    Block(List()))),
                                                                                         Var(__q)))),
                                                                        Var(__p))),
                                                              Var(v24)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(k))),
                                                           VarPat(v22))),
                                             MethodCall(flatMap(Lambda(VarPat(v21),
                                                                       Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                           Var(v21))),
                                                                                                Tuple(List(Tuple(List(Var(k))),
                                                                                                           Var(v22)))))))),
                                                                MethodCall(MethodCall(IntConst(0),
                                                                                      until,
                                                                                      List(MethodCall(MethodCall(Var(n),
                                                                                                                 +,
                                                                                                                 List(IntConst(999))),
                                                                                                      /,
                                                                                                      List(IntConst(1000))))),
                                                                           par,
                                                                           null)),
                                                        toList,
                                                        null)),
                                      Nth(Var(PP), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(kk),
                                                                              VarPat(j))),
                                                                VarPat(v23))),
                                                  MethodCall(flatMap(Lambda(VarPat(v21),
                                                                            Sequence(List(Tuple(List(Tuple(List(Var(v21),
                                                                                                                Var(j))),
                                                                                                     Tuple(List(Tuple(List(Var(kk))),
                                                                                                                Var(v23)))))))),
                                                                     MethodCall(MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(m),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000))))),
                                                                                par,
                                                                                null)),
                                                             toList,
                                                             null)),
                                           Nth(Var(QQ), 3)))))))
Scala code:
scala.Tuple3(n, m, PP._3.flatMap(((x$macro$7: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$7 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), (v22 @ _)) => 0.until(n.+(999)./(1000)).par.map(((x$macro$9: Int) => x$macro$9 match {
  case (v21 @ _) => scala.Tuple2(scala.Tuple2(i, v21), scala.Tuple2(k, v22))
})).toList
})).cogroup(QQ._3.flatMap(((x$macro$10: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$10 match {
  case scala.Tuple2(scala.Tuple2((kk @ _), (j @ _)), (v23 @ _)) => 0.until(m.+(999)./(1000)).par.map(((x$macro$12: Int) => x$macro$12 match {
  case (v21 @ _) => scala.Tuple2(scala.Tuple2(v21, j), scala.Tuple2(kk, v23))
})).toList
}))).map(((x$macro$13: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[Iterable[scala.Tuple2[Int, Array[Double]]], Iterable[scala.Tuple2[Int, Array[Double]]]]]) => x$macro$13 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), scala.Tuple2((__p @ _), (__q @ _))) => scala.Tuple2(scala.Tuple2(i, j), {
    val v24 = Array.ofDim[Double](1000000);
    __p.foreach(((x$macro$17: scala.Tuple2[Int, Array[Double]]) => (x$macro$17 match {
      case scala.Tuple2((k1 @ _), (_p @ _)) => __q.foreach(((x$macro$21: scala.Tuple2[Int, Array[Double]]) => (x$macro$21 match {
        case scala.Tuple2((k2 @ _), (_q @ _)) => if (k1.==(k2))
          0.until(1000).par.foreach(((v28: Int) => 0.until(1000).foreach(((v29: Int) => 0.until(1000).foreach(((v31: Int) => v24.update(v28.*(1000).+(v31), v24(v28.*(1000).+(v31)).+(_p(v28.*(1000).+(v29)).*(_q(v29.*(1000).+(v31)))))))))))
        else
          ()
      })))
    })));
    v24
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        MethodCall(Var(r),
                                                   -,
                                                   List(Var(v)))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(r))),
                                       Var(RR)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(jj))),
                                                     VarPat(v))),
                                       Var(E2)),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j)))),
                             Predicate(MethodCall(Var(r),
                                                  >,
                                                  List(DoubleConst(0.0))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(m))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                        MethodCall(Var(r),
                                                   -,
                                                   List(Var(v)))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(r))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v36),
                                                                                          Var(v37))),
                                                                               MapAccess(Var(v35),
                                                                                         Tuple(List(MethodCall(Var(v36),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v37),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v38),
                                                                                             VarPat(v39),
                                                                                             VarPat(v34))),
                                                                               Var(RR)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v32),
                                                                                                          VarPat(v33))),
                                                                                            VarPat(v35))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v34),
                                                                                        Var(v34)))),
                                                                    Generator(VarPat(v36),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v38)))),
                                                                    Generator(VarPat(v37),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v39)))),
                                                                    Predicate(MethodCall(Var(v32),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v36),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v33),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v37),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(RR)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(jj))),
                                                     VarPat(v))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v44),
                                                                                          Var(v45))),
                                                                               MapAccess(Var(v43),
                                                                                         Tuple(List(MethodCall(Var(v44),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v45),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v46),
                                                                                             VarPat(v47),
                                                                                             VarPat(v42))),
                                                                               Var(E2)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v40),
                                                                                                          VarPat(v41))),
                                                                                            VarPat(v43))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v42),
                                                                                        Var(v42)))),
                                                                    Generator(VarPat(v44),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v46)))),
                                                                    Generator(VarPat(v45),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v47)))),
                                                                    Predicate(MethodCall(Var(v40),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v44),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v41),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v45),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(E2)))),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j)))),
                             Predicate(MethodCall(Var(r),
                                                  >,
                                                  List(DoubleConst(0.0))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v52,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(j))),
                                                                                               VarPat(r))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v48),
                                                                                                                          Var(v49))),
                                                                                                               MapAccess(Var(_r),
                                                                                                                         MethodCall(MethodCall(Var(v48),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v49))))))),
                                                                                               List(Generator(VarPat(v48),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v49),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                             VarPat(jj))),
                                                                                               VarPat(v))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v50),
                                                                                                                          Var(v51))),
                                                                                                               MapAccess(Var(_v),
                                                                                                                         MethodCall(MethodCall(Var(v50),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v51))))))),
                                                                                               List(Generator(VarPat(v50),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v51),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(ii),
                                                                                            ==,
                                                                                            List(Var(i)))),
                                                                       Predicate(MethodCall(Var(jj),
                                                                                            ==,
                                                                                            List(Var(j)))),
                                                                       Predicate(MethodCall(Var(r),
                                                                                            >,
                                                                                            List(DoubleConst(0.0)))),
                                                                       LetBinding(TuplePat(List(TuplePat(List(VarPat(v53),
                                                                                                              VarPat(v54))),
                                                                                                VarPat(v55))),
                                                                                  Tuple(List(Tuple(List(Var(i),
                                                                                                        Var(j))),
                                                                                             MethodCall(Var(r),
                                                                                                        -,
                                                                                                        List(Var(v)))))),
                                                                       AssignQual(MapAccess(Var(v52),
                                                                                            MethodCall(MethodCall(Var(v53),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v54)))),
                                                                                  Var(v55)))),
                                                    Var(v52)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_r))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_v))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_r))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_r)))))))),
                                                                   Nth(Var(RR),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_v))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_v)))))))),
                                                                        Nth(Var(E2),
                                                                            3))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v52,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(VarPat(v56),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v57),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v58),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v59),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v58),
                                                                                            ==,
                                                                                            List(Var(v56)))),
                                                                       Predicate(MethodCall(Var(v59),
                                                                                            ==,
                                                                                            List(Var(v57)))),
                                                                       Predicate(MethodCall(MapAccess(Var(_r),
                                                                                                      MethodCall(MethodCall(Var(v56),
                                                                                                                            *,
                                                                                                                            List(IntConst(1000))),
                                                                                                                 +,
                                                                                                                 List(Var(v57)))),
                                                                                            >,
                                                                                            List(DoubleConst(0.0)))),
                                                                       AssignQual(MapAccess(Var(v52),
                                                                                            MethodCall(MethodCall(Var(v56),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v57)))),
                                                                                  MethodCall(MapAccess(Var(_r),
                                                                                                       MethodCall(MethodCall(Var(v56),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v57)))),
                                                                                             -,
                                                                                             List(MapAccess(Var(_v),
                                                                                                            MethodCall(MethodCall(Var(v58),
                                                                                                                                  *,
                                                                                                                                  List(IntConst(1000))),
                                                                                                                       +,
                                                                                                                       List(Var(v59))))))))),
                                                    Var(v52)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_r))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_v))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_r))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_r)))))))),
                                                                   Nth(Var(RR),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_v))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_v)))))))),
                                                                        Nth(Var(E2),
                                                                            3))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(m),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(j))),
                                         Block(List(VarDecl(v52,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(VarPat(v56),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v57),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(MapAccess(Var(_r),
                                                                                                      MethodCall(MethodCall(Var(v56),
                                                                                                                            *,
                                                                                                                            List(IntConst(1000))),
                                                                                                                 +,
                                                                                                                 List(Var(v57)))),
                                                                                            >,
                                                                                            List(DoubleConst(0.0)))),
                                                                       AssignQual(MapAccess(Var(v52),
                                                                                            MethodCall(MethodCall(Var(v56),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v57)))),
                                                                                  MethodCall(MapAccess(Var(_r),
                                                                                                       MethodCall(MethodCall(Var(v56),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v57)))),
                                                                                             -,
                                                                                             List(MapAccess(Var(_v),
                                                                                                            MethodCall(MethodCall(Var(v56),
                                                                                                                                  *,
                                                                                                                                  List(IntConst(1000))),
                                                                                                                       +,
                                                                                                                       List(Var(v57))))))))),
                                                    Var(v52)))))),
                         List(Generator(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                  VarPat(j))),
                                                                    VarPat(_r))),
                                                      TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                  VarPat(jj))),
                                                                    VarPat(_v))))),
                                        flatMap(Lambda(TuplePat(List(VarPat(_k),
                                                                     VarPat(x))),
                                                       Sequence(List(Var(x)))),
                                                MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                      VarPat(j))),
                                                                                        VarPat(_r))),
                                                                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                              Var(j))),
                                                                                                   Tuple(List(Tuple(List(Var(i),
                                                                                                                         Var(j))),
                                                                                                              Var(_r)))))))),
                                                                   Nth(Var(RR),
                                                                       3)),
                                                           join,
                                                           List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                           VarPat(jj))),
                                                                                             VarPat(_v))),
                                                                               Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                                                   Var(jj))),
                                                                                                        Tuple(List(Tuple(List(Var(ii),
                                                                                                                              Var(jj))),
                                                                                                                   Var(_v)))))))),
                                                                        Nth(Var(E2),
                                                                            3))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      VarPat(_r))),
                                        TuplePat(List(TuplePat(List(VarPat(ii),
                                                                    VarPat(jj))),
                                                      VarPat(_v))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v52,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(VarPat(v56),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v57),
                                                                                                IfE(MethodCall(MapAccess(Var(_r),
                                                                                                                         MethodCall(MethodCall(Var(v56),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v57)))),
                                                                                                               >,
                                                                                                               List(DoubleConst(0.0))),
                                                                                                    Block(List(MethodCall(MapAccess(Var(v52),
                                                                                                                                    MethodCall(MethodCall(Var(v56),
                                                                                                                                                          *,
                                                                                                                                                          List(IntConst(1000))),
                                                                                                                                               +,
                                                                                                                                               List(Var(v57)))),
                                                                                                                          =,
                                                                                                                          List(MethodCall(MapAccess(Var(_r),
                                                                                                                                                    MethodCall(MethodCall(Var(v56),
                                                                                                                                                                          *,
                                                                                                                                                                          List(IntConst(1000))),
                                                                                                                                                               +,
                                                                                                                                                               List(Var(v57)))),
                                                                                                                                          -,
                                                                                                                                          List(MapAccess(Var(_v),
                                                                                                                                                         MethodCall(MethodCall(Var(v56),
                                                                                                                                                                               *,
                                                                                                                                                                               List(IntConst(1000))),
                                                                                                                                                                    +,
                                                                                                                                                                    List(Var(v57)))))))))),
                                                                                                    Block(List()))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        MethodCall(IntConst(0),
                                                                                   until,
                                                                                   List(IntConst(1000))))),
                                                              Var(v52)))))))),
                   flatMap(Lambda(TuplePat(List(VarPat(_k), VarPat(x))),
                                  Sequence(List(Var(x)))),
                           MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                 VarPat(j))),
                                                                   VarPat(_r))),
                                                     Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                         Var(j))),
                                                                              Tuple(List(Tuple(List(Var(i),
                                                                                                    Var(j))),
                                                                                         Var(_r)))))))),
                                              Nth(Var(RR), 3)),
                                      join,
                                      List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                      VarPat(jj))),
                                                                        VarPat(_v))),
                                                          Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                              Var(jj))),
                                                                                   Tuple(List(Tuple(List(Var(ii),
                                                                                                         Var(jj))),
                                                                                              Var(_v)))))))),
                                                   Nth(Var(E2), 3))))))))
Parallelized term:
Tuple(List(Var(n),
           Var(m),
           flatMap(Lambda(TuplePat(List(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(j))),
                                                      VarPat(_r))),
                                        TuplePat(List(TuplePat(List(VarPat(ii),
                                                                    VarPat(jj))),
                                                      VarPat(_v))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(j))),
                                                   Block(List(VarDecl(v52,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(VarPat(v56),
                                                                               Call(foreach,
                                                                                    List(Lambda(VarPat(v57),
                                                                                                IfE(MethodCall(MapAccess(Var(_r),
                                                                                                                         MethodCall(MethodCall(Var(v56),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v57)))),
                                                                                                               >,
                                                                                                               List(DoubleConst(0.0))),
                                                                                                    Block(List(MethodCall(MapAccess(Var(v52),
                                                                                                                                    MethodCall(MethodCall(Var(v56),
                                                                                                                                                          *,
                                                                                                                                                          List(IntConst(1000))),
                                                                                                                                               +,
                                                                                                                                               List(Var(v57)))),
                                                                                                                          =,
                                                                                                                          List(MethodCall(MapAccess(Var(_r),
                                                                                                                                                    MethodCall(MethodCall(Var(v56),
                                                                                                                                                                          *,
                                                                                                                                                                          List(IntConst(1000))),
                                                                                                                                                               +,
                                                                                                                                                               List(Var(v57)))),
                                                                                                                                          -,
                                                                                                                                          List(MapAccess(Var(_v),
                                                                                                                                                         MethodCall(MethodCall(Var(v56),
                                                                                                                                                                               *,
                                                                                                                                                                               List(IntConst(1000))),
                                                                                                                                                                    +,
                                                                                                                                                                    List(Var(v57)))))))))),
                                                                                                    Block(List()))),
                                                                                         MethodCall(IntConst(0),
                                                                                                    until,
                                                                                                    List(IntConst(1000)))))),
                                                                        MethodCall(MethodCall(IntConst(0),
                                                                                              until,
                                                                                              List(IntConst(1000))),
                                                                                   par,
                                                                                   null))),
                                                              Var(v52)))))))),
                   flatMap(Lambda(TuplePat(List(VarPat(_k), VarPat(x))),
                                  Sequence(List(Var(x)))),
                           MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                 VarPat(j))),
                                                                   VarPat(_r))),
                                                     Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                         Var(j))),
                                                                              Tuple(List(Tuple(List(Var(i),
                                                                                                    Var(j))),
                                                                                         Var(_r)))))))),
                                              Nth(Var(RR), 3)),
                                      join,
                                      List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                      VarPat(jj))),
                                                                        VarPat(_v))),
                                                          Sequence(List(Tuple(List(Tuple(List(Var(ii),
                                                                                              Var(jj))),
                                                                                   Tuple(List(Tuple(List(Var(ii),
                                                                                                         Var(jj))),
                                                                                              Var(_v)))))))),
                                                   Nth(Var(E2), 3))))))))
Scala code:
scala.Tuple3(n, m, RR._3.map(((x$macro$164: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$164 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (_r @ _)) => scala.Tuple2(scala.Tuple2(i, j), scala.Tuple2(scala.Tuple2(i, j), _r))
})).join(E2._3.map(((x$macro$165: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$165 match {
  case scala.Tuple2(scala.Tuple2((ii @ _), (jj @ _)), (_v @ _)) => scala.Tuple2(scala.Tuple2(ii, jj), scala.Tuple2(scala.Tuple2(ii, jj), _v))
}))).map(((x$macro$166: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]) => x$macro$166 match {
  case scala.Tuple2((_k @ _), (x @ _)) => x
})).map(((x$macro$167: scala.Tuple2[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]], scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]) => x$macro$167 match {
  case scala.Tuple2(scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (_r @ _)), scala.Tuple2(scala.Tuple2((ii @ _), (jj @ _)), (_v @ _))) => scala.Tuple2(scala.Tuple2(i, j), {
    val v52 = Array.ofDim[Double](1000000);
    0.until(1000).par.foreach(((v56: Int) => 0.until(1000).foreach(((v57: Int) => if (_r(v56.*(1000).+(v57)).>(0.0))
      v52.update(v56.*(1000).+(v57), _r(v56.*(1000).+(v57)).-(_v(v56.*(1000).+(v57))))
    else
      ()))));
    v52
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
Term:
Call(tiled,
     List(Tuple(List(Var(n), Var(d))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(k))),
                                        reduce(^, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(e))),
                                       Var(EE)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                   VarPat(jj))),
                                                     VarPat(q))),
                                       Var(QQ)),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j)))),
                             LetBinding(VarPat(v),
                                        MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                         *,
                                                                         List(DoubleConst(0.002))),
                                                              *,
                                                              List(Var(e))),
                                                   *,
                                                   List(Var(q)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(k))),
                                         Tuple(List(Var(i), Var(k))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(n), Var(d))),
          Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(k))),
                                        reduce(^, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(e))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v64),
                                                                                          Var(v65))),
                                                                               MapAccess(Var(v63),
                                                                                         Tuple(List(MethodCall(Var(v64),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v65),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v66),
                                                                                             VarPat(v67),
                                                                                             VarPat(v62))),
                                                                               Var(EE)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v60),
                                                                                                          VarPat(v61))),
                                                                                            VarPat(v63))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v62),
                                                                                        Var(v62)))),
                                                                    Generator(VarPat(v64),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v66)))),
                                                                    Generator(VarPat(v65),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v67)))),
                                                                    Predicate(MethodCall(Var(v60),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v64),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v61),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v65),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(EE)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                   VarPat(jj))),
                                                     VarPat(q))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v72),
                                                                                          Var(v73))),
                                                                               MapAccess(Var(v71),
                                                                                         Tuple(List(MethodCall(Var(v72),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v73),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v74),
                                                                                             VarPat(v75),
                                                                                             VarPat(v70))),
                                                                               Var(QQ)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v68),
                                                                                                          VarPat(v69))),
                                                                                            VarPat(v71))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v70),
                                                                                        Var(v70)))),
                                                                    Generator(VarPat(v72),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v74)))),
                                                                    Generator(VarPat(v73),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v75)))),
                                                                    Predicate(MethodCall(Var(v68),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v72),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v69),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v73),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(QQ)))),
                             Predicate(MethodCall(Var(jj),
                                                  ==,
                                                  List(Var(j)))),
                             LetBinding(VarPat(v),
                                        MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                         *,
                                                                         List(DoubleConst(0.002))),
                                                              *,
                                                              List(Var(e))),
                                                   *,
                                                   List(Var(q)))),
                             GroupByQual(TuplePat(List(VarPat(i),
                                                       VarPat(k))),
                                         Tuple(List(Var(i), Var(k))))))))
Translated comprehension:
Tuple(List(Var(n),
           Var(d),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(k))),
                                         Block(List(VarDecl(v83,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_e))),
                                                                                 Var(__e)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_q))),
                                                                                 Var(__q)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(j))),
                                                                                               VarPat(e))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v76),
                                                                                                                          Var(v77))),
                                                                                                               MapAccess(Var(_e),
                                                                                                                         MethodCall(MethodCall(Var(v76),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v77))))))),
                                                                                               List(Generator(VarPat(v76),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v77),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                                                             VarPat(jj))),
                                                                                               VarPat(q))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v78),
                                                                                                                          Var(v79))),
                                                                                                               MapAccess(Var(_q),
                                                                                                                         MethodCall(MethodCall(Var(v78),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v79))))))),
                                                                                               List(Generator(VarPat(v78),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v79),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(jj),
                                                                                            ==,
                                                                                            List(Var(j)))),
                                                                       LetBinding(VarPat(v),
                                                                                  MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                   *,
                                                                                                                   List(DoubleConst(0.002))),
                                                                                                        *,
                                                                                                        List(Var(e))),
                                                                                             *,
                                                                                             List(Var(q)))),
                                                                       LetBinding(TuplePat(List(VarPat(v84),
                                                                                                VarPat(v85))),
                                                                                  Tuple(List(Var(i),
                                                                                             Var(k)))),
                                                                       AssignQual(MapAccess(Var(v83),
                                                                                            MethodCall(MethodCall(Var(v84),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v85)))),
                                                                                  MethodCall(MapAccess(Var(v83),
                                                                                                       MethodCall(MethodCall(Var(v84),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v85)))),
                                                                                             ^,
                                                                                             List(Var(v)))))),
                                                    Var(v83)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(k))),
                                                      TuplePat(List(VarPat(__e),
                                                                    VarPat(__q))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v80))),
                                                                                 Tuple(List(Tuple(List(Var(j))),
                                                                                            Var(v81)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(j))),
                                                                                              VarPat(v81))),
                                                                                Nth(Var(EE),
                                                                                    3)),
                                                                      Generator(VarPat(v80),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v80),
                                                                                                 Var(k))),
                                                                                      Tuple(List(Tuple(List(Var(jj))),
                                                                                                 Var(v82)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                                                                 VarPat(jj))),
                                                                                                   VarPat(v82))),
                                                                                     Nth(Var(QQ),
                                                                                         3)),
                                                                           Generator(VarPat(v80),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(d),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Normalized comprehension:
Tuple(List(Var(n),
           Var(d),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(k))),
                                         Block(List(VarDecl(v83,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_e))),
                                                                                 Var(__e)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_q))),
                                                                                 Var(__q)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v87),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v88),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v89),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v90),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v90),
                                                                                            ==,
                                                                                            List(Var(v88)))),
                                                                       AssignQual(MapAccess(Var(v83),
                                                                                            MethodCall(MethodCall(Var(v87),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v89)))),
                                                                                  MethodCall(MapAccess(Var(v83),
                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v89)))),
                                                                                             ^,
                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                   *,
                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                        *,
                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                             *,
                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                  +,
                                                                                                                                                  List(Var(v88)))))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_q),
                                                                                                                            MethodCall(MethodCall(Var(v89),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v90))))))))))),
                                                    Var(v83)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(k))),
                                                      TuplePat(List(VarPat(__e),
                                                                    VarPat(__q))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v80))),
                                                                                 Tuple(List(Tuple(List(Var(j))),
                                                                                            Var(v81)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(j))),
                                                                                              VarPat(v81))),
                                                                                Nth(Var(EE),
                                                                                    3)),
                                                                      Generator(VarPat(v80),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v80),
                                                                                                 Var(k))),
                                                                                      Tuple(List(Tuple(List(Var(jj))),
                                                                                                 Var(v82)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                                                                 VarPat(jj))),
                                                                                                   VarPat(v82))),
                                                                                     Nth(Var(QQ),
                                                                                         3)),
                                                                           Generator(VarPat(v80),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(d),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Optimized comprehension:
Tuple(List(Var(n),
           Var(d),
           Comprehension(List(Tuple(List(Tuple(List(Var(i), Var(k))),
                                         Block(List(VarDecl(v83,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_e))),
                                                                                 Var(__e)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_q))),
                                                                                 Var(__q)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v87),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v88),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v89),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v83),
                                                                                            MethodCall(MethodCall(Var(v87),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v89)))),
                                                                                  MethodCall(MapAccess(Var(v83),
                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v89)))),
                                                                                             ^,
                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                   *,
                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                        *,
                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                             *,
                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                  +,
                                                                                                                                                  List(Var(v88)))))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_q),
                                                                                                                            MethodCall(MethodCall(Var(v89),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v88))))))))))),
                                                    Var(v83)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                    VarPat(k))),
                                                      TuplePat(List(VarPat(__e),
                                                                    VarPat(__q))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(i),
                                                                                            Var(v80))),
                                                                                 Tuple(List(Tuple(List(Var(j))),
                                                                                            Var(v81)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(j))),
                                                                                              VarPat(v81))),
                                                                                Nth(Var(EE),
                                                                                    3)),
                                                                      Generator(VarPat(v80),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(n),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v80),
                                                                                                 Var(k))),
                                                                                      Tuple(List(Tuple(List(Var(jj))),
                                                                                                 Var(v82)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                                                                 VarPat(jj))),
                                                                                                   VarPat(v82))),
                                                                                     Nth(Var(QQ),
                                                                                         3)),
                                                                           Generator(VarPat(v80),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(d),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Final Translated term:
Tuple(List(Var(n),
           Var(d),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(k))),
                                        TuplePat(List(VarPat(__e),
                                                      VarPat(__q))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(k))),
                                                   Block(List(VarDecl(v83,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_e))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_q))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v87),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v88),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v89),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v83),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v89)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v83),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v89)))),
                                                                                                                                                                                             ^,
                                                                                                                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                                                                                                                   *,
                                                                                                                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                                                                                                                        *,
                                                                                                                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                                  List(Var(v88)))))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_q),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v89),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v88))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))),
                                                                                                    Block(List()))),
                                                                                         Var(__q)))),
                                                                        Var(__e))),
                                                              Var(v83)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(j))),
                                                           VarPat(v81))),
                                             flatMap(Lambda(VarPat(v80),
                                                            Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                Var(v80))),
                                                                                     Tuple(List(Tuple(List(Var(j))),
                                                                                                Var(v81)))))))),
                                                     MethodCall(IntConst(0),
                                                                until,
                                                                List(MethodCall(MethodCall(Var(n),
                                                                                           +,
                                                                                           List(IntConst(999))),
                                                                                /,
                                                                                List(IntConst(1000))))))),
                                      Nth(Var(EE), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(k),
                                                                              VarPat(jj))),
                                                                VarPat(v82))),
                                                  flatMap(Lambda(VarPat(v80),
                                                                 Sequence(List(Tuple(List(Tuple(List(Var(v80),
                                                                                                     Var(k))),
                                                                                          Tuple(List(Tuple(List(Var(jj))),
                                                                                                     Var(v82)))))))),
                                                          MethodCall(IntConst(0),
                                                                     until,
                                                                     List(MethodCall(MethodCall(Var(d),
                                                                                                +,
                                                                                                List(IntConst(999))),
                                                                                     /,
                                                                                     List(IntConst(1000))))))),
                                           Nth(Var(QQ), 3)))))))
Parallelized term:
Tuple(List(Var(n),
           Var(d),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                      VarPat(k))),
                                        TuplePat(List(VarPat(__e),
                                                      VarPat(__q))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                              Var(k))),
                                                   Block(List(VarDecl(v83,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_e))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_q))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v87),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v88),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v89),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v83),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v89)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v83),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v89)))),
                                                                                                                                                                                             ^,
                                                                                                                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                                                                                                                   *,
                                                                                                                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                                                                                                                        *,
                                                                                                                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v87),
                                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                                  List(Var(v88)))))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_q),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v89),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v88))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(MethodCall(IntConst(0),
                                                                                                                                    until,
                                                                                                                                    List(IntConst(1000))),
                                                                                                                         par,
                                                                                                                         null))),
                                                                                                    Block(List()))),
                                                                                         Var(__q)))),
                                                                        Var(__e))),
                                                              Var(v83)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(j))),
                                                           VarPat(v81))),
                                             MethodCall(flatMap(Lambda(VarPat(v80),
                                                                       Sequence(List(Tuple(List(Tuple(List(Var(i),
                                                                                                           Var(v80))),
                                                                                                Tuple(List(Tuple(List(Var(j))),
                                                                                                           Var(v81)))))))),
                                                                MethodCall(MethodCall(IntConst(0),
                                                                                      until,
                                                                                      List(MethodCall(MethodCall(Var(n),
                                                                                                                 +,
                                                                                                                 List(IntConst(999))),
                                                                                                      /,
                                                                                                      List(IntConst(1000))))),
                                                                           par,
                                                                           null)),
                                                        toList,
                                                        null)),
                                      Nth(Var(EE), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(k),
                                                                              VarPat(jj))),
                                                                VarPat(v82))),
                                                  MethodCall(flatMap(Lambda(VarPat(v80),
                                                                            Sequence(List(Tuple(List(Tuple(List(Var(v80),
                                                                                                                Var(k))),
                                                                                                     Tuple(List(Tuple(List(Var(jj))),
                                                                                                                Var(v82)))))))),
                                                                     MethodCall(MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(d),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000))))),
                                                                                par,
                                                                                null)),
                                                             toList,
                                                             null)),
                                           Nth(Var(QQ), 3)))))))
Scala code:
scala.Tuple3(n, d, EE._3.flatMap(((x$macro$228: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$228 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (v81 @ _)) => 0.until(n.+(999)./(1000)).par.map(((x$macro$230: Int) => x$macro$230 match {
  case (v80 @ _) => scala.Tuple2(scala.Tuple2(i, v80), scala.Tuple2(j, v81))
})).toList
})).cogroup(QQ._3.flatMap(((x$macro$231: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$231 match {
  case scala.Tuple2(scala.Tuple2((k @ _), (jj @ _)), (v82 @ _)) => 0.until(d.+(999)./(1000)).par.map(((x$macro$233: Int) => x$macro$233 match {
  case (v80 @ _) => scala.Tuple2(scala.Tuple2(v80, k), scala.Tuple2(jj, v82))
})).toList
}))).map(((x$macro$234: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[Iterable[scala.Tuple2[Int, Array[Double]]], Iterable[scala.Tuple2[Int, Array[Double]]]]]) => x$macro$234 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (k @ _)), scala.Tuple2((__e @ _), (__q @ _))) => scala.Tuple2(scala.Tuple2(i, k), {
    val v83 = Array.ofDim[Double](1000000);
    __e.foreach(((x$macro$238: scala.Tuple2[Int, Array[Double]]) => (x$macro$238 match {
      case scala.Tuple2((k1 @ _), (_e @ _)) => __q.foreach(((x$macro$242: scala.Tuple2[Int, Array[Double]]) => (x$macro$242 match {
        case scala.Tuple2((k2 @ _), (_q @ _)) => if (k1.==(k2))
          0.until(1000).par.foreach(((v87: Int) => 0.until(1000).foreach(((v88: Int) => 0.until(1000).foreach(((v89: Int) => v83.update(v87.*(1000).+(v89), v83(v87.*(1000).+(v89)).^((2).*(0.002).*(_e(v87.*(1000).+(v88))).*(_q(v89.*(1000).+(v88)))))))))))
        else
          ()
      })))
    })));
    v83
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
Term:
Call(tiled,
     List(Tuple(List(Var(m), Var(d))),
          Comprehension(List(Tuple(List(Tuple(List(Var(k), Var(j))),
                                        reduce(^, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(e))),
                                       Var(EE)),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(k))),
                                                     VarPat(p))),
                                       Var(PP)),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             LetBinding(VarPat(v),
                                        MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                         *,
                                                                         List(DoubleConst(0.002))),
                                                              *,
                                                              List(Var(e))),
                                                   *,
                                                   List(Var(p)))),
                             GroupByQual(TuplePat(List(VarPat(k),
                                                       VarPat(j))),
                                         Tuple(List(Var(k), Var(j))))))))
Lifted term:
Call(tiled,
     List(Tuple(List(Var(m), Var(d))),
          Comprehension(List(Tuple(List(Tuple(List(Var(k), Var(j))),
                                        reduce(^, Var(v))))),
                        List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                   VarPat(j))),
                                                     VarPat(e))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v95),
                                                                                          Var(v96))),
                                                                               MapAccess(Var(v94),
                                                                                         Tuple(List(MethodCall(Var(v95),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v96),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v97),
                                                                                             VarPat(v98),
                                                                                             VarPat(v93))),
                                                                               Var(EE)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v91),
                                                                                                          VarPat(v92))),
                                                                                            VarPat(v94))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v93),
                                                                                        Var(v93)))),
                                                                    Generator(VarPat(v95),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v97)))),
                                                                    Generator(VarPat(v96),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v98)))),
                                                                    Predicate(MethodCall(Var(v91),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v95),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v92),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v96),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(EE)))),
                             Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                   VarPat(k))),
                                                     VarPat(p))),
                                       Call(lifted,
                                            List(StringConst("tiled"),
                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v103),
                                                                                          Var(v104))),
                                                                               MapAccess(Var(v102),
                                                                                         Tuple(List(MethodCall(Var(v103),
                                                                                                               %,
                                                                                                               List(IntConst(1000))),
                                                                                                    MethodCall(Var(v104),
                                                                                                               %,
                                                                                                               List(IntConst(1000))))))))),
                                                               List(LetBinding(TuplePat(List(VarPat(v105),
                                                                                             VarPat(v106),
                                                                                             VarPat(v101))),
                                                                               Var(PP)),
                                                                    Generator(TuplePat(List(TuplePat(List(VarPat(v99),
                                                                                                          VarPat(v100))),
                                                                                            VarPat(v102))),
                                                                              Call(lifted,
                                                                                   List(StringConst("rdd"),
                                                                                        Var(v101),
                                                                                        Var(v101)))),
                                                                    Generator(VarPat(v103),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v105)))),
                                                                    Generator(VarPat(v104),
                                                                              MethodCall(IntConst(0),
                                                                                         until,
                                                                                         List(Var(v106)))),
                                                                    Predicate(MethodCall(Var(v99),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v103),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))),
                                                                    Predicate(MethodCall(Var(v100),
                                                                                         ==,
                                                                                         List(MethodCall(Var(v104),
                                                                                                         /,
                                                                                                         List(IntConst(1000)))))))),
                                                 Var(PP)))),
                             Predicate(MethodCall(Var(ii),
                                                  ==,
                                                  List(Var(i)))),
                             LetBinding(VarPat(v),
                                        MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                         *,
                                                                         List(DoubleConst(0.002))),
                                                              *,
                                                              List(Var(e))),
                                                   *,
                                                   List(Var(p)))),
                             GroupByQual(TuplePat(List(VarPat(k),
                                                       VarPat(j))),
                                         Tuple(List(Var(k), Var(j))))))))
Translated comprehension:
Tuple(List(Var(m),
           Var(d),
           Comprehension(List(Tuple(List(Tuple(List(Var(k), Var(j))),
                                         Block(List(VarDecl(v114,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_e))),
                                                                                 Var(__e)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_p))),
                                                                                 Var(__p)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                             VarPat(j))),
                                                                                               VarPat(e))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v107),
                                                                                                                          Var(v108))),
                                                                                                               MapAccess(Var(_e),
                                                                                                                         MethodCall(MethodCall(Var(v107),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v108))))))),
                                                                                               List(Generator(VarPat(v107),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v108),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                             VarPat(k))),
                                                                                               VarPat(p))),
                                                                                 Comprehension(List(Tuple(List(Tuple(List(Var(v109),
                                                                                                                          Var(v110))),
                                                                                                               MapAccess(Var(_p),
                                                                                                                         MethodCall(MethodCall(Var(v109),
                                                                                                                                               *,
                                                                                                                                               List(IntConst(1000))),
                                                                                                                                    +,
                                                                                                                                    List(Var(v110))))))),
                                                                                               List(Generator(VarPat(v109),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000)))),
                                                                                                    Generator(VarPat(v110),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))))),
                                                                       Predicate(MethodCall(Var(ii),
                                                                                            ==,
                                                                                            List(Var(i)))),
                                                                       LetBinding(VarPat(v),
                                                                                  MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                   *,
                                                                                                                   List(DoubleConst(0.002))),
                                                                                                        *,
                                                                                                        List(Var(e))),
                                                                                             *,
                                                                                             List(Var(p)))),
                                                                       LetBinding(TuplePat(List(VarPat(v115),
                                                                                                VarPat(v116))),
                                                                                  Tuple(List(Var(k),
                                                                                             Var(j)))),
                                                                       AssignQual(MapAccess(Var(v114),
                                                                                            MethodCall(MethodCall(Var(v115),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v116)))),
                                                                                  MethodCall(MapAccess(Var(v114),
                                                                                                       MethodCall(MethodCall(Var(v115),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v116)))),
                                                                                             ^,
                                                                                             List(Var(v)))))),
                                                    Var(v114)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__e),
                                                                    VarPat(__p))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(j),
                                                                                            Var(v111))),
                                                                                 Tuple(List(Tuple(List(Var(i))),
                                                                                            Var(v112)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(j))),
                                                                                              VarPat(v112))),
                                                                                Nth(Var(EE),
                                                                                    3)),
                                                                      Generator(VarPat(v111),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(m),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v111),
                                                                                                 Var(k))),
                                                                                      Tuple(List(Tuple(List(Var(ii))),
                                                                                                 Var(v113)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                                 VarPat(k))),
                                                                                                   VarPat(v113))),
                                                                                     Nth(Var(PP),
                                                                                         3)),
                                                                           Generator(VarPat(v111),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(d),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Normalized comprehension:
Tuple(List(Var(m),
           Var(d),
           Comprehension(List(Tuple(List(Tuple(List(Var(k), Var(j))),
                                         Block(List(VarDecl(v114,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_e))),
                                                                                 Var(__e)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_p))),
                                                                                 Var(__p)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v118),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v119),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v120),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v121),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Predicate(MethodCall(Var(v120),
                                                                                            ==,
                                                                                            List(Var(v118)))),
                                                                       AssignQual(MapAccess(Var(v114),
                                                                                            MethodCall(MethodCall(Var(v121),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v119)))),
                                                                                  MethodCall(MapAccess(Var(v114),
                                                                                                       MethodCall(MethodCall(Var(v121),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v119)))),
                                                                                             ^,
                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                   *,
                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                        *,
                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                       MethodCall(MethodCall(Var(v118),
                                                                                                                                                             *,
                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                  +,
                                                                                                                                                  List(Var(v119)))))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_p),
                                                                                                                            MethodCall(MethodCall(Var(v120),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v121))))))))))),
                                                    Var(v114)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__e),
                                                                    VarPat(__p))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(j),
                                                                                            Var(v111))),
                                                                                 Tuple(List(Tuple(List(Var(i))),
                                                                                            Var(v112)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(j))),
                                                                                              VarPat(v112))),
                                                                                Nth(Var(EE),
                                                                                    3)),
                                                                      Generator(VarPat(v111),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(m),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v111),
                                                                                                 Var(k))),
                                                                                      Tuple(List(Tuple(List(Var(ii))),
                                                                                                 Var(v113)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                                 VarPat(k))),
                                                                                                   VarPat(v113))),
                                                                                     Nth(Var(PP),
                                                                                         3)),
                                                                           Generator(VarPat(v111),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(d),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Optimized comprehension:
Tuple(List(Var(m),
           Var(d),
           Comprehension(List(Tuple(List(Tuple(List(Var(k), Var(j))),
                                         Block(List(VarDecl(v114,
                                                            Call(tile, List())),
                                                    Comprehension(List(),
                                                                  List(Generator(TuplePat(List(VarPat(k1),
                                                                                               VarPat(_e))),
                                                                                 Var(__e)),
                                                                       Generator(TuplePat(List(VarPat(k2),
                                                                                               VarPat(_p))),
                                                                                 Var(__p)),
                                                                       Predicate(MethodCall(Var(k1),
                                                                                            ==,
                                                                                            List(Var(k2)))),
                                                                       Generator(VarPat(v118),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v119),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       Generator(VarPat(v121),
                                                                                 MethodCall(IntConst(0),
                                                                                            until,
                                                                                            List(IntConst(1000)))),
                                                                       AssignQual(MapAccess(Var(v114),
                                                                                            MethodCall(MethodCall(Var(v121),
                                                                                                                  *,
                                                                                                                  List(IntConst(1000))),
                                                                                                       +,
                                                                                                       List(Var(v119)))),
                                                                                  MethodCall(MapAccess(Var(v114),
                                                                                                       MethodCall(MethodCall(Var(v121),
                                                                                                                             *,
                                                                                                                             List(IntConst(1000))),
                                                                                                                  +,
                                                                                                                  List(Var(v119)))),
                                                                                             ^,
                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                   *,
                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                        *,
                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                       MethodCall(MethodCall(Var(v118),
                                                                                                                                                             *,
                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                  +,
                                                                                                                                                  List(Var(v119)))))),
                                                                                                             *,
                                                                                                             List(MapAccess(Var(_p),
                                                                                                                            MethodCall(MethodCall(Var(v118),
                                                                                                                                                  *,
                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                       +,
                                                                                                                                       List(Var(v121))))))))))),
                                                    Var(v114)))))),
                         List(Generator(TuplePat(List(TuplePat(List(VarPat(k),
                                                                    VarPat(j))),
                                                      TuplePat(List(VarPat(__e),
                                                                    VarPat(__p))))),
                                        MethodCall(Comprehension(List(Tuple(List(Tuple(List(Var(j),
                                                                                            Var(v111))),
                                                                                 Tuple(List(Tuple(List(Var(i))),
                                                                                            Var(v112)))))),
                                                                 List(Generator(TuplePat(List(TuplePat(List(VarPat(i),
                                                                                                            VarPat(j))),
                                                                                              VarPat(v112))),
                                                                                Nth(Var(EE),
                                                                                    3)),
                                                                      Generator(VarPat(v111),
                                                                                MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(m),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000)))))))),
                                                   cogroup,
                                                   List(Comprehension(List(Tuple(List(Tuple(List(Var(v111),
                                                                                                 Var(k))),
                                                                                      Tuple(List(Tuple(List(Var(ii))),
                                                                                                 Var(v113)))))),
                                                                      List(Generator(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                                                                 VarPat(k))),
                                                                                                   VarPat(v113))),
                                                                                     Nth(Var(PP),
                                                                                         3)),
                                                                           Generator(VarPat(v111),
                                                                                     MethodCall(IntConst(0),
                                                                                                until,
                                                                                                List(MethodCall(MethodCall(Var(d),
                                                                                                                           +,
                                                                                                                           List(IntConst(999))),
                                                                                                                /,
                                                                                                                List(IntConst(1000)))))))))))))))
Final Translated term:
Tuple(List(Var(m),
           Var(d),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(k),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__e),
                                                      VarPat(__p))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(k),
                                                              Var(j))),
                                                   Block(List(VarDecl(v114,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_e))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_p))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v118),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v119),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v121),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v114),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v121),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v119)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v114),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v121),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v119)))),
                                                                                                                                                                                             ^,
                                                                                                                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                                                                                                                   *,
                                                                                                                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                                                                                                                        *,
                                                                                                                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v118),
                                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                                  List(Var(v119)))))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_p),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v118),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v121))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(IntConst(0),
                                                                                                                         until,
                                                                                                                         List(IntConst(1000))))),
                                                                                                    Block(List()))),
                                                                                         Var(__p)))),
                                                                        Var(__e))),
                                                              Var(v114)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(j))),
                                                           VarPat(v112))),
                                             flatMap(Lambda(VarPat(v111),
                                                            Sequence(List(Tuple(List(Tuple(List(Var(j),
                                                                                                Var(v111))),
                                                                                     Tuple(List(Tuple(List(Var(i))),
                                                                                                Var(v112)))))))),
                                                     MethodCall(IntConst(0),
                                                                until,
                                                                List(MethodCall(MethodCall(Var(m),
                                                                                           +,
                                                                                           List(IntConst(999))),
                                                                                /,
                                                                                List(IntConst(1000))))))),
                                      Nth(Var(EE), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                              VarPat(k))),
                                                                VarPat(v113))),
                                                  flatMap(Lambda(VarPat(v111),
                                                                 Sequence(List(Tuple(List(Tuple(List(Var(v111),
                                                                                                     Var(k))),
                                                                                          Tuple(List(Tuple(List(Var(ii))),
                                                                                                     Var(v113)))))))),
                                                          MethodCall(IntConst(0),
                                                                     until,
                                                                     List(MethodCall(MethodCall(Var(d),
                                                                                                +,
                                                                                                List(IntConst(999))),
                                                                                     /,
                                                                                     List(IntConst(1000))))))),
                                           Nth(Var(PP), 3)))))))
Parallelized term:
Tuple(List(Var(m),
           Var(d),
           flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(k),
                                                      VarPat(j))),
                                        TuplePat(List(VarPat(__e),
                                                      VarPat(__p))))),
                          Sequence(List(Tuple(List(Tuple(List(Var(k),
                                                              Var(j))),
                                                   Block(List(VarDecl(v114,
                                                                      Call(tile,
                                                                           List())),
                                                              Call(foreach,
                                                                   List(Lambda(TuplePat(List(VarPat(k1),
                                                                                             VarPat(_e))),
                                                                               Call(foreach,
                                                                                    List(Lambda(TuplePat(List(VarPat(k2),
                                                                                                              VarPat(_p))),
                                                                                                IfE(MethodCall(Var(k1),
                                                                                                               ==,
                                                                                                               List(Var(k2))),
                                                                                                    Call(foreach,
                                                                                                         List(Lambda(VarPat(v118),
                                                                                                                     Call(foreach,
                                                                                                                          List(Lambda(VarPat(v119),
                                                                                                                                      Call(foreach,
                                                                                                                                           List(Lambda(VarPat(v121),
                                                                                                                                                       Block(List(MethodCall(MapAccess(Var(v114),
                                                                                                                                                                                       MethodCall(MethodCall(Var(v121),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                  +,
                                                                                                                                                                                                  List(Var(v119)))),
                                                                                                                                                                             =,
                                                                                                                                                                             List(MethodCall(MapAccess(Var(v114),
                                                                                                                                                                                                       MethodCall(MethodCall(Var(v121),
                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                  List(Var(v119)))),
                                                                                                                                                                                             ^,
                                                                                                                                                                                             List(MethodCall(MethodCall(MethodCall(IntConst(2),
                                                                                                                                                                                                                                   *,
                                                                                                                                                                                                                                   List(DoubleConst(0.002))),
                                                                                                                                                                                                                        *,
                                                                                                                                                                                                                        List(MapAccess(Var(_e),
                                                                                                                                                                                                                                       MethodCall(MethodCall(Var(v118),
                                                                                                                                                                                                                                                             *,
                                                                                                                                                                                                                                                             List(IntConst(1000))),
                                                                                                                                                                                                                                                  +,
                                                                                                                                                                                                                                                  List(Var(v119)))))),
                                                                                                                                                                                                             *,
                                                                                                                                                                                                             List(MapAccess(Var(_p),
                                                                                                                                                                                                                            MethodCall(MethodCall(Var(v118),
                                                                                                                                                                                                                                                  *,
                                                                                                                                                                                                                                                  List(IntConst(1000))),
                                                                                                                                                                                                                                       +,
                                                                                                                                                                                                                                       List(Var(v121))))))))))))),
                                                                                                                                                MethodCall(IntConst(0),
                                                                                                                                                           until,
                                                                                                                                                           List(IntConst(1000)))))),
                                                                                                                               MethodCall(IntConst(0),
                                                                                                                                          until,
                                                                                                                                          List(IntConst(1000)))))),
                                                                                                              MethodCall(MethodCall(IntConst(0),
                                                                                                                                    until,
                                                                                                                                    List(IntConst(1000))),
                                                                                                                         par,
                                                                                                                         null))),
                                                                                                    Block(List()))),
                                                                                         Var(__p)))),
                                                                        Var(__e))),
                                                              Var(v114)))))))),
                   MethodCall(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(i),
                                                                         VarPat(j))),
                                                           VarPat(v112))),
                                             MethodCall(flatMap(Lambda(VarPat(v111),
                                                                       Sequence(List(Tuple(List(Tuple(List(Var(j),
                                                                                                           Var(v111))),
                                                                                                Tuple(List(Tuple(List(Var(i))),
                                                                                                           Var(v112)))))))),
                                                                MethodCall(MethodCall(IntConst(0),
                                                                                      until,
                                                                                      List(MethodCall(MethodCall(Var(m),
                                                                                                                 +,
                                                                                                                 List(IntConst(999))),
                                                                                                      /,
                                                                                                      List(IntConst(1000))))),
                                                                           par,
                                                                           null)),
                                                        toList,
                                                        null)),
                                      Nth(Var(EE), 3)),
                              cogroup,
                              List(flatMap(Lambda(TuplePat(List(TuplePat(List(VarPat(ii),
                                                                              VarPat(k))),
                                                                VarPat(v113))),
                                                  MethodCall(flatMap(Lambda(VarPat(v111),
                                                                            Sequence(List(Tuple(List(Tuple(List(Var(v111),
                                                                                                                Var(k))),
                                                                                                     Tuple(List(Tuple(List(Var(ii))),
                                                                                                                Var(v113)))))))),
                                                                     MethodCall(MethodCall(IntConst(0),
                                                                                           until,
                                                                                           List(MethodCall(MethodCall(Var(d),
                                                                                                                      +,
                                                                                                                      List(IntConst(999))),
                                                                                                           /,
                                                                                                           List(IntConst(1000))))),
                                                                                par,
                                                                                null)),
                                                             toList,
                                                             null)),
                                           Nth(Var(PP), 3)))))))
Scala code:
scala.Tuple3(m, d, EE._3.flatMap(((x$macro$376: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$376 match {
  case scala.Tuple2(scala.Tuple2((i @ _), (j @ _)), (v112 @ _)) => 0.until(m.+(999)./(1000)).par.map(((x$macro$378: Int) => x$macro$378 match {
  case (v111 @ _) => scala.Tuple2(scala.Tuple2(j, v111), scala.Tuple2(i, v112))
})).toList
})).cogroup(PP._3.flatMap(((x$macro$379: scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]) => x$macro$379 match {
  case scala.Tuple2(scala.Tuple2((ii @ _), (k @ _)), (v113 @ _)) => 0.until(d.+(999)./(1000)).par.map(((x$macro$381: Int) => x$macro$381 match {
  case (v111 @ _) => scala.Tuple2(scala.Tuple2(v111, k), scala.Tuple2(ii, v113))
})).toList
}))).map(((x$macro$382: scala.Tuple2[scala.Tuple2[Int, Int], scala.Tuple2[Iterable[scala.Tuple2[Int, Array[Double]]], Iterable[scala.Tuple2[Int, Array[Double]]]]]) => x$macro$382 match {
  case scala.Tuple2(scala.Tuple2((k @ _), (j @ _)), scala.Tuple2((__e @ _), (__p @ _))) => scala.Tuple2(scala.Tuple2(k, j), {
    val v114 = Array.ofDim[Double](1000000);
    __e.foreach(((x$macro$386: scala.Tuple2[Int, Array[Double]]) => (x$macro$386 match {
      case scala.Tuple2((k1 @ _), (_e @ _)) => __p.foreach(((x$macro$390: scala.Tuple2[Int, Array[Double]]) => (x$macro$390 match {
        case scala.Tuple2((k2 @ _), (_p @ _)) => if (k1.==(k2))
          0.until(1000).par.foreach(((v118: Int) => 0.until(1000).foreach(((v119: Int) => 0.until(1000).foreach(((v121: Int) => v114.update(v121.*(1000).+(v119), v114(v121.*(1000).+(v119)).^((2).*(0.002).*(_e(v118.*(1000).+(v119))).*(_p(v118.*(1000).+(v121)))))))))))
        else
          ()
      })))
    })));
    v114
  })
})))
Scala type: scala.Tuple3[Int, Int, org.apache.spark.rdd.RDD[scala.Tuple2[scala.Tuple2[Int, Int], Array[Double]]]]
20/08/09 09:08:06 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 09:08:06 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 09:08:06 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:08:06 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 09:08:06 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:08:06 INFO spark.SparkContext: Submitted application: tiles
20/08/09 09:08:07 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 09:08:07 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 09:08:07 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 09:08:07 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 09:08:07 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 09:08:07 INFO util.Utils: Successfully started service 'sparkDriver' on port 40301.
20/08/09 09:08:07 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 09:08:07 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 09:08:07 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 09:08:07 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 09:08:07 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 09:08:07 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-af23fa29-fea3-4a33-9ef7-e34141b53518
20/08/09 09:08:07 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 09:08:07 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 09:08:07 INFO util.log: Logging initialized @2651ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 09:08:07 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 09:08:07 INFO server.Server: Started @2758ms
20/08/09 09:08:07 INFO server.AbstractConnector: Started ServerConnector@3ce861a9{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 09:08:07 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 09:08:07 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 09:08:07 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:40301/jars/array.jar with timestamp 1596989287781
20/08/09 09:08:07 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:40301/jars/test.jar with timestamp 1596989287782
20/08/09 09:08:07 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 09:08:07 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809090808-0000
20/08/09 09:08:08 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 46614.
20/08/09 09:08:08 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:46614
20/08/09 09:08:08 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 09:08:08 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 46614, None)
20/08/09 09:08:08 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:46614 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 46614, None)
20/08/09 09:08:08 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 46614, None)
20/08/09 09:08:08 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 46614, None)
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809090808-0000/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809090808-0000/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/2 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/0 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/1 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/3 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/5 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/7 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/4 is now RUNNING
20/08/09 09:08:08 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809090808-0000/6 is now RUNNING
20/08/09 09:08:08 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 09:08:08 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Add cores=24 n=17880 N=1000 2.38 GB 18.613 secs
*** DIABLO Add cores=24 n=17880 N=1000 2.38 GB 22.174 secs
20/08/09 09:11:08 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 09:11:08 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 09:11:09 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:11:09 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 09:11:09 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:11:09 INFO spark.SparkContext: Submitted application: tiles
20/08/09 09:11:09 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 09:11:09 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 09:11:09 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 09:11:09 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 09:11:09 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 09:11:09 INFO util.Utils: Successfully started service 'sparkDriver' on port 38143.
20/08/09 09:11:09 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 09:11:09 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 09:11:09 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 09:11:09 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 09:11:09 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 09:11:09 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-69e7375a-65f8-45d2-a759-fad75d24037f
20/08/09 09:11:09 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 09:11:09 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 09:11:09 INFO util.log: Logging initialized @2425ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 09:11:09 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 09:11:09 INFO server.Server: Started @2510ms
20/08/09 09:11:09 INFO server.AbstractConnector: Started ServerConnector@74fef3f7{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 09:11:09 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 09:11:09 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 09:11:09 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:38143/jars/array.jar with timestamp 1596989469775
20/08/09 09:11:09 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:38143/jars/test.jar with timestamp 1596989469775
20/08/09 09:11:09 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 09:11:09 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809091110-0001
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 41163.
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:41163
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091110-0001/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091110-0001/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:11:10 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 09:11:10 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 41163, None)
20/08/09 09:11:10 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:41163 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 41163, None)
20/08/09 09:11:10 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 41163, None)
20/08/09 09:11:10 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 41163, None)
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/3 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/1 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/0 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/2 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/4 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/5 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/6 is now RUNNING
20/08/09 09:11:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091110-0001/7 is now RUNNING
20/08/09 09:11:10 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 09:11:10 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Multiply cores=24 n=3576 N=1000 0.10 GB 35.553 secs
*** DIABLO groupBy Multiply cores=24 n=3576 N=1000 0.10 GB 41.656 secs
*** DIABLO groupByJoin Multiply cores=24 n=3576 N=1000 0.10 GB 9.520 secs
20/08/09 09:17:03 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 09:17:03 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 09:17:03 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:17:03 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 09:17:03 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:17:03 INFO spark.SparkContext: Submitted application: tiles
20/08/09 09:17:03 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 09:17:03 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 09:17:03 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 09:17:03 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 09:17:03 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 09:17:04 INFO util.Utils: Successfully started service 'sparkDriver' on port 46112.
20/08/09 09:17:04 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 09:17:04 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 09:17:04 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 09:17:04 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 09:17:04 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 09:17:04 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-f7dd527d-3b02-4999-a669-c6b38bc9cb17
20/08/09 09:17:04 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 09:17:04 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 09:17:04 INFO util.log: Logging initialized @2387ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 09:17:04 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 09:17:04 INFO server.Server: Started @2482ms
20/08/09 09:17:04 INFO server.AbstractConnector: Started ServerConnector@36a14aab{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 09:17:04 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 09:17:04 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 09:17:04 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:46112/jars/array.jar with timestamp 1596989824546
20/08/09 09:17:04 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:46112/jars/test.jar with timestamp 1596989824547
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 09:17:04 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 33 ms (0 ms spent in bootstraps)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809091704-0002
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:17:04 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 39024.
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:17:04 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:39024
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091704-0002/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:17:04 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091704-0002/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:17:04 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 09:17:04 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 09:17:04 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:39024 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 09:17:04 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 09:17:04 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/7 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/6 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/1 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/0 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/4 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/5 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/2 is now RUNNING
20/08/09 09:17:04 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091704-0002/3 is now RUNNING
20/08/09 09:17:05 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 09:17:05 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** DIABLO groupByJoin Multiply cores=24 n=8940 N=1000 0.60 GB 30.572 secs
20/08/09 09:19:15 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 09:19:15 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 09:19:15 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:19:15 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 09:19:15 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:19:15 INFO spark.SparkContext: Submitted application: tiles
20/08/09 09:19:15 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 09:19:15 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 09:19:15 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 09:19:15 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 09:19:15 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 09:19:16 INFO util.Utils: Successfully started service 'sparkDriver' on port 41251.
20/08/09 09:19:16 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 09:19:16 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 09:19:16 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 09:19:16 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 09:19:16 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 09:19:16 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-4c43f1f0-4f93-43cd-a597-64deec3a76a1
20/08/09 09:19:16 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 09:19:16 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 09:19:16 INFO util.log: Logging initialized @2385ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 09:19:16 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 09:19:16 INFO server.Server: Started @2476ms
20/08/09 09:19:16 INFO server.AbstractConnector: Started ServerConnector@79fa41e3{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 09:19:16 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 09:19:16 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 09:19:16 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:41251/jars/array.jar with timestamp 1596989956642
20/08/09 09:19:16 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:41251/jars/test.jar with timestamp 1596989956643
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 09:19:16 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 34 ms (0 ms spent in bootstraps)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809091916-0003
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:19:16 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 36207.
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:19:16 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:36207
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809091916-0003/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:19:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809091916-0003/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:19:16 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36207, None)
20/08/09 09:19:16 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:36207 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 36207, None)
20/08/09 09:19:16 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36207, None)
20/08/09 09:19:16 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 36207, None)
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/2 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/4 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/3 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/5 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/7 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/6 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/0 is now RUNNING
20/08/09 09:19:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809091916-0003/1 is now RUNNING
20/08/09 09:19:17 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 09:19:17 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Factorization cores=24 n=8940 m=8940 d=1000 N=1000 0.60 GB 144.517 secs
*** DIABLO Factorization cores=24 n=8940 m=8940 d=1000 N=1000 0.60 GB 144.462 secs
20/08/09 09:38:41 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 09:38:42 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 09:38:42 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:38:42 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 09:38:42 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:38:42 INFO spark.SparkContext: Submitted application: tiles
20/08/09 09:38:42 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 09:38:42 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 09:38:42 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 09:38:42 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 09:38:42 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 09:38:42 INFO util.Utils: Successfully started service 'sparkDriver' on port 36175.
20/08/09 09:38:42 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 09:38:42 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 09:38:42 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 09:38:42 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 09:38:42 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 09:38:42 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-28ca049c-088d-4a9c-8fb7-5c51e5d6eb37
20/08/09 09:38:42 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 09:38:42 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 09:38:42 INFO util.log: Logging initialized @2374ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 09:38:43 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 09:38:43 INFO server.Server: Started @2461ms
20/08/09 09:38:43 INFO server.AbstractConnector: Started ServerConnector@65d6bc6b{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 09:38:43 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 09:38:43 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:36175/jars/array.jar with timestamp 1596991123195
20/08/09 09:38:43 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:36175/jars/test.jar with timestamp 1596991123196
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 09:38:43 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809093843-0004
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:38:43 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 35734.
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:38:43 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:35734
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809093843-0004/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809093843-0004/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:38:43 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 09:38:43 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 35734, None)
20/08/09 09:38:43 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:35734 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 35734, None)
20/08/09 09:38:43 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 35734, None)
20/08/09 09:38:43 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 35734, None)
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/2 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/3 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/5 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/0 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/6 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/7 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/1 is now RUNNING
20/08/09 09:38:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809093843-0004/4 is now RUNNING
20/08/09 09:38:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 09:38:43 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Add cores=24 n=25280 N=1000 4.76 GB 40.152 secs
*** DIABLO Add cores=24 n=25280 N=1000 4.76 GB 51.627 secs
20/08/09 09:45:22 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 09:45:23 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 09:45:23 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:45:23 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 09:45:23 INFO resource.ResourceUtils: ==============================================================
20/08/09 09:45:23 INFO spark.SparkContext: Submitted application: tiles
20/08/09 09:45:23 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 09:45:23 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 09:45:23 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 09:45:23 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 09:45:23 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 09:45:23 INFO util.Utils: Successfully started service 'sparkDriver' on port 46292.
20/08/09 09:45:23 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 09:45:23 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 09:45:23 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 09:45:23 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 09:45:23 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 09:45:23 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-d0d8012c-a215-468b-945f-14cefbc436a8
20/08/09 09:45:23 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 09:45:23 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 09:45:24 INFO util.log: Logging initialized @2864ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 09:45:24 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 09:45:24 INFO server.Server: Started @2950ms
20/08/09 09:45:24 INFO server.AbstractConnector: Started ServerConnector@74ae1c5e{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 09:45:24 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 09:45:24 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:46292/jars/array.jar with timestamp 1596991524231
20/08/09 09:45:24 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:46292/jars/test.jar with timestamp 1596991524232
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 09:45:24 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 34 ms (0 ms spent in bootstraps)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809094524-0005
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 36915.
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:45:24 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:36915
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809094524-0005/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809094524-0005/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 09:45:24 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 09:45:24 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36915, None)
20/08/09 09:45:24 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:36915 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 36915, None)
20/08/09 09:45:24 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36915, None)
20/08/09 09:45:24 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 36915, None)
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/7 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/6 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/0 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/1 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/2 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/4 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/3 is now RUNNING
20/08/09 09:45:24 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809094524-0005/5 is now RUNNING
20/08/09 09:45:24 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 09:45:24 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Multiply cores=24 n=5056 N=1000 0.19 GB 92.199 secs
*** DIABLO groupBy Multiply cores=24 n=5056 N=1000 0.19 GB 146.566 secs
*** DIABLO groupByJoin Multiply cores=24 n=5056 N=1000 0.19 GB 18.989 secs
20/08/09 10:02:42 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 10:02:43 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 10:02:43 INFO resource.ResourceUtils: ==============================================================
20/08/09 10:02:43 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 10:02:43 INFO resource.ResourceUtils: ==============================================================
20/08/09 10:02:43 INFO spark.SparkContext: Submitted application: tiles
20/08/09 10:02:43 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 10:02:43 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 10:02:43 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 10:02:43 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 10:02:43 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 10:02:43 INFO util.Utils: Successfully started service 'sparkDriver' on port 46576.
20/08/09 10:02:43 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 10:02:43 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 10:02:43 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 10:02:43 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 10:02:43 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 10:02:43 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-c2c795a4-e339-48ea-9703-43a5717372a2
20/08/09 10:02:43 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 10:02:43 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 10:02:43 INFO util.log: Logging initialized @2444ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 10:02:43 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 10:02:43 INFO server.Server: Started @2531ms
20/08/09 10:02:43 INFO server.AbstractConnector: Started ServerConnector@525c1355{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 10:02:43 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 10:02:43 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 10:02:43 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:46576/jars/array.jar with timestamp 1596992563841
20/08/09 10:02:43 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:46576/jars/test.jar with timestamp 1596992563842
20/08/09 10:02:43 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 10:02:44 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 33 ms (0 ms spent in bootstraps)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809100244-0006
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 10:02:44 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 36396.
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:36396
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100244-0006/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100244-0006/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 10:02:44 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 10:02:44 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36396, None)
20/08/09 10:02:44 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:36396 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 36396, None)
20/08/09 10:02:44 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36396, None)
20/08/09 10:02:44 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 36396, None)
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/2 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/3 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/5 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/4 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/7 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/6 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/0 is now RUNNING
20/08/09 10:02:44 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100244-0006/1 is now RUNNING
20/08/09 10:02:44 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 10:02:44 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** DIABLO groupByJoin Multiply cores=24 n=12640 N=1000 1.19 GB 84.995 secs
20/08/09 10:08:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 10:08:36 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 10:08:36 INFO resource.ResourceUtils: ==============================================================
20/08/09 10:08:36 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 10:08:36 INFO resource.ResourceUtils: ==============================================================
20/08/09 10:08:36 INFO spark.SparkContext: Submitted application: tiles
20/08/09 10:08:36 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 10:08:36 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 10:08:36 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 10:08:36 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 10:08:36 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 10:08:36 INFO util.Utils: Successfully started service 'sparkDriver' on port 38377.
20/08/09 10:08:36 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 10:08:36 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 10:08:36 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 10:08:36 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 10:08:36 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 10:08:36 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-f611a909-da59-4b03-b6ea-e2a2f5f38a97
20/08/09 10:08:36 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 10:08:36 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 10:08:36 INFO util.log: Logging initialized @2362ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 10:08:37 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 10:08:37 INFO server.Server: Started @2452ms
20/08/09 10:08:37 INFO server.AbstractConnector: Started ServerConnector@2c59d3aa{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 10:08:37 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 10:08:37 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:38377/jars/array.jar with timestamp 1596992917186
20/08/09 10:08:37 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:38377/jars/test.jar with timestamp 1596992917186
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 10:08:37 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 32 ms (0 ms spent in bootstraps)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809100837-0007
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 35483.
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 10:08:37 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:35483
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809100837-0007/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809100837-0007/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 10:08:37 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 10:08:37 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 35483, None)
20/08/09 10:08:37 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:35483 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 35483, None)
20/08/09 10:08:37 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 35483, None)
20/08/09 10:08:37 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 35483, None)
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/5 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/3 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/7 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/4 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/2 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/6 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/1 is now RUNNING
20/08/09 10:08:37 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809100837-0007/0 is now RUNNING
20/08/09 10:08:37 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 10:08:37 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Factorization cores=24 n=12640 m=12640 d=1000 N=1000 1.19 GB 296.448 secs
*** DIABLO Factorization cores=24 n=12640 m=12640 d=1000 N=1000 1.19 GB 310.453 secs
20/08/09 10:49:15 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 10:49:16 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 10:49:16 INFO resource.ResourceUtils: ==============================================================
20/08/09 10:49:16 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 10:49:16 INFO resource.ResourceUtils: ==============================================================
20/08/09 10:49:16 INFO spark.SparkContext: Submitted application: tiles
20/08/09 10:49:16 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 10:49:16 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 10:49:16 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 10:49:16 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 10:49:16 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 10:49:16 INFO util.Utils: Successfully started service 'sparkDriver' on port 34888.
20/08/09 10:49:16 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 10:49:16 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 10:49:16 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 10:49:16 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 10:49:16 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 10:49:16 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-a58324a4-5140-4af6-86db-75d90736b7d7
20/08/09 10:49:16 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 10:49:16 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 10:49:16 INFO util.log: Logging initialized @2566ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 10:49:16 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 10:49:16 INFO server.Server: Started @2660ms
20/08/09 10:49:16 INFO server.AbstractConnector: Started ServerConnector@2d6ab48d{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 10:49:16 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 10:49:16 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 10:49:16 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:34888/jars/array.jar with timestamp 1596995356922
20/08/09 10:49:16 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:34888/jars/test.jar with timestamp 1596995356923
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 10:49:17 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809104917-0008
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 10:49:17 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 36958.
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:36958
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809104917-0008/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809104917-0008/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 10:49:17 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 10:49:17 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36958, None)
20/08/09 10:49:17 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:36958 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 36958, None)
20/08/09 10:49:17 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 36958, None)
20/08/09 10:49:17 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 36958, None)
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/2 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/3 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/6 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/7 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/1 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/4 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/5 is now RUNNING
20/08/09 10:49:17 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809104917-0008/0 is now RUNNING
20/08/09 10:49:17 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 10:49:17 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Add cores=24 n=30960 N=1000 7.14 GB 104.458 secs
20/08/09 10:58:41 ERROR scheduler.TaskSetManager: Task 1 in stage 22.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 22.0 failed 4 times, most recent failure: Lost task 1.3 in stage 22.0 (TID 69, 198.202.119.159, executor 1): java.io.IOException: No space left on device
	at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
	at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:51)
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:211)
	at sun.nio.ch.FileChannelImpl.transferToTrustedChannel(FileChannelImpl.java:516)
	at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:609)
	at org.apache.spark.util.Utils$.copyFileStreamNIO(Utils.scala:429)
	at org.apache.spark.util.Utils.copyFileStreamNIO(Utils.scala)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.writePartitionedDataWithChannel(BypassMergeSortShuffleWriter.java:232)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.writePartitionedData(BypassMergeSortShuffleWriter.java:205)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:167)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 11:00:10 ERROR scheduler.TaskSetManager: Task 1 in stage 25.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 25.0 failed 4 times, most recent failure: Lost task 1.3 in stage 25.0 (TID 78, 198.202.112.163, executor 7): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 11:00:59 ERROR scheduler.TaskSetManager: Task 0 in stage 28.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 28.0 failed 4 times, most recent failure: Lost task 0.3 in stage 28.0 (TID 93, 198.202.116.165, executor 3): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 11:02:05 ERROR scheduler.TaskSetManager: Task 1 in stage 32.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 32.0 failed 4 times, most recent failure: Lost task 1.3 in stage 32.0 (TID 107, 198.202.116.165, executor 2): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
*** DIABLO Add cores=24 n=30960 N=1000 7.14 GB 79.531 secs
20/08/09 11:02:08 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 11:02:08 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 11:02:08 INFO resource.ResourceUtils: ==============================================================
20/08/09 11:02:08 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 11:02:08 INFO resource.ResourceUtils: ==============================================================
20/08/09 11:02:08 INFO spark.SparkContext: Submitted application: tiles
20/08/09 11:02:09 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 11:02:09 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 11:02:09 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 11:02:09 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 11:02:09 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 11:02:09 INFO util.Utils: Successfully started service 'sparkDriver' on port 37526.
20/08/09 11:02:09 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 11:02:09 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 11:02:09 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 11:02:09 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 11:02:09 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 11:02:09 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-4c961f42-c995-4975-8641-9c1ceefdd978
20/08/09 11:02:09 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 11:02:09 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 11:02:09 INFO util.log: Logging initialized @2460ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 11:02:09 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 11:02:09 INFO server.Server: Started @2545ms
20/08/09 11:02:09 INFO server.AbstractConnector: Started ServerConnector@74fef3f7{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 11:02:09 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 11:02:09 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 11:02:09 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:37526/jars/array.jar with timestamp 1596996129783
20/08/09 11:02:09 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:37526/jars/test.jar with timestamp 1596996129783
20/08/09 11:02:09 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 11:02:09 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809110210-0009
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 11:02:10 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 40172.
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 11:02:10 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:40172
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809110210-0009/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809110210-0009/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 11:02:10 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 11:02:10 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 40172, None)
20/08/09 11:02:10 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:40172 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 40172, None)
20/08/09 11:02:10 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 40172, None)
20/08/09 11:02:10 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 40172, None)
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/3 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/2 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/0 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/4 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/1 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/7 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/6 is now RUNNING
20/08/09 11:02:10 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809110210-0009/5 is now RUNNING
20/08/09 11:02:10 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 11:02:10 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Multiply cores=24 n=6192 N=1000 0.29 GB 166.112 secs
*** DIABLO groupBy Multiply cores=24 n=6192 N=1000 0.29 GB 233.743 secs
*** DIABLO groupByJoin Multiply cores=24 n=6192 N=1000 0.29 GB 19.069 secs
20/08/09 11:30:13 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 11:30:13 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 11:30:13 INFO resource.ResourceUtils: ==============================================================
20/08/09 11:30:13 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 11:30:13 INFO resource.ResourceUtils: ==============================================================
20/08/09 11:30:13 INFO spark.SparkContext: Submitted application: tiles
20/08/09 11:30:14 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 11:30:14 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 11:30:14 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 11:30:14 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 11:30:14 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 11:30:14 INFO util.Utils: Successfully started service 'sparkDriver' on port 41067.
20/08/09 11:30:14 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 11:30:14 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 11:30:14 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 11:30:14 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 11:30:14 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 11:30:14 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-9e78e857-26d7-4205-89e1-71a49f010cf3
20/08/09 11:30:14 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 11:30:14 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 11:30:14 INFO util.log: Logging initialized @2370ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 11:30:14 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 11:30:14 INFO server.Server: Started @2458ms
20/08/09 11:30:14 INFO server.AbstractConnector: Started ServerConnector@a25a26f{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 11:30:14 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 11:30:14 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 11:30:14 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:41067/jars/array.jar with timestamp 1596997814738
20/08/09 11:30:14 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:41067/jars/test.jar with timestamp 1596997814739
20/08/09 11:30:14 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 11:30:14 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 34 ms (0 ms spent in bootstraps)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809113015-0010
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 40379.
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 11:30:15 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:40379
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809113015-0010/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809113015-0010/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 11:30:15 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 11:30:15 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 40379, None)
20/08/09 11:30:15 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:40379 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 40379, None)
20/08/09 11:30:15 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 40379, None)
20/08/09 11:30:15 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 40379, None)
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809113015-0010/2 is now RUNNING
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809113015-0010/4 is now RUNNING
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809113015-0010/5 is now RUNNING
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809113015-0010/6 is now RUNNING
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809113015-0010/3 is now RUNNING
20/08/09 11:30:15 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809113015-0010/7 is now RUNNING
20/08/09 11:30:15 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 11:30:15 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** DIABLO groupByJoin Multiply cores=24 n=15480 N=1000 1.79 GB 421.006 secs
20/08/09 11:58:32 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 11:58:33 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 11:58:33 INFO resource.ResourceUtils: ==============================================================
20/08/09 11:58:33 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 11:58:33 INFO resource.ResourceUtils: ==============================================================
20/08/09 11:58:33 INFO spark.SparkContext: Submitted application: tiles
20/08/09 11:58:33 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 11:58:33 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 11:58:33 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 11:58:33 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 11:58:33 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 11:58:33 INFO util.Utils: Successfully started service 'sparkDriver' on port 40280.
20/08/09 11:58:33 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 11:58:33 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 11:58:33 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 11:58:33 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 11:58:33 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 11:58:33 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-d56efd90-d2a0-488a-a787-61b9f34005e6
20/08/09 11:58:33 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 11:58:33 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 11:58:33 INFO util.log: Logging initialized @2839ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 11:58:34 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 11:58:34 INFO server.Server: Started @2924ms
20/08/09 11:58:34 INFO server.AbstractConnector: Started ServerConnector@4141e380{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 11:58:34 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 11:58:34 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:40280/jars/array.jar with timestamp 1596999514188
20/08/09 11:58:34 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:40280/jars/test.jar with timestamp 1596999514189
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 11:58:34 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 32 ms (0 ms spent in bootstraps)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809115834-0011
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 11:58:34 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 39352.
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 11:58:34 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:39352
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809115834-0011/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809115834-0011/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 11:58:34 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 11:58:34 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 39352, None)
20/08/09 11:58:34 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:39352 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 39352, None)
20/08/09 11:58:34 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 39352, None)
20/08/09 11:58:34 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 39352, None)
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/2 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/3 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/5 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/4 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/1 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/6 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/7 is now RUNNING
20/08/09 11:58:34 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809115834-0011/0 is now RUNNING
20/08/09 11:58:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 11:58:34 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Factorization cores=24 n=15480 m=15480 d=1000 N=1000 1.79 GB 422.183 secs
20/08/09 12:56:56 ERROR scheduler.TaskSetManager: Task 0 in stage 2188.1 failed 4 times; aborting job
Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 2188.1 failed 4 times, most recent failure: Lost task 0.3 in stage 2188.1 (TID 416, 198.202.119.159, executor 0): java.io.IOException: No space left on device
	at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
	at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:51)
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:211)
	at sun.nio.ch.FileChannelImpl.transferToTrustedChannel(FileChannelImpl.java:516)
	at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:609)
	at org.apache.spark.util.Utils$.copyFileStreamNIO(Utils.scala:429)
	at org.apache.spark.util.Utils.copyFileStreamNIO(Utils.scala)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.writePartitionedDataWithChannel(BypassMergeSortShuffleWriter.java:232)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.writePartitionedData(BypassMergeSortShuffleWriter.java:205)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:167)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.failJobAndIndependentStages(DAGScheduler.scala:2023)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$abortStage$2(DAGScheduler.scala:1972)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$abortStage$2$adapted(DAGScheduler.scala:1971)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1971)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$handleTaskSetFailed$1(DAGScheduler.scala:950)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$handleTaskSetFailed$1$adapted(DAGScheduler.scala:950)
	at scala.Option.foreach(Option.scala:407)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:950)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2203)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2152)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2141)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:752)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2093)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2114)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2133)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2158)
	at org.apache.spark.rdd.RDD.count(RDD.scala:1227)
	at Factorization$.testFactorizationDiablo$1(factorization.scala:105)
	at Factorization$.$anonfun$main$53(factorization.scala:117)
	at Factorization$.$anonfun$main$51(factorization.scala:111)
	at scala.runtime.java8.JFunction1$mcDI$sp.apply(JFunction1$mcDI$sp.java:23)
	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:238)
	at scala.collection.immutable.Range.foreach(Range.scala:158)
	at scala.collection.TraversableLike.map(TraversableLike.scala:238)
	at scala.collection.TraversableLike.map$(TraversableLike.scala:231)
	at scala.collection.AbstractTraversable.map(Traversable.scala:108)
	at Factorization$.test$1(factorization.scala:111)
	at Factorization$.main(factorization.scala:117)
	at Factorization.main(factorization.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52)
	at org.apache.spark.deploy.SparkSubmit.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:928)
	at org.apache.spark.deploy.SparkSubmit.doRunMain$1(SparkSubmit.scala:180)
	at org.apache.spark.deploy.SparkSubmit.submit(SparkSubmit.scala:203)
	at org.apache.spark.deploy.SparkSubmit.doSubmit(SparkSubmit.scala:90)
	at org.apache.spark.deploy.SparkSubmit$$anon$2.doSubmit(SparkSubmit.scala:1007)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:1016)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
Caused by: java.io.IOException: No space left on device
	at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
	at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:51)
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:211)
	at sun.nio.ch.FileChannelImpl.transferToTrustedChannel(FileChannelImpl.java:516)
	at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:609)
	at org.apache.spark.util.Utils$.copyFileStreamNIO(Utils.scala:429)
	at org.apache.spark.util.Utils.copyFileStreamNIO(Utils.scala)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.writePartitionedDataWithChannel(BypassMergeSortShuffleWriter.java:232)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.writePartitionedData(BypassMergeSortShuffleWriter.java:205)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:167)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
20/08/09 12:56:59 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 12:57:00 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 12:57:00 INFO resource.ResourceUtils: ==============================================================
20/08/09 12:57:00 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 12:57:00 INFO resource.ResourceUtils: ==============================================================
20/08/09 12:57:00 INFO spark.SparkContext: Submitted application: tiles
20/08/09 12:57:00 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 12:57:00 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 12:57:00 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 12:57:00 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 12:57:00 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 12:57:00 INFO util.Utils: Successfully started service 'sparkDriver' on port 44664.
20/08/09 12:57:00 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 12:57:00 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 12:57:00 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 12:57:00 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 12:57:00 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 12:57:00 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-73ac3aa2-96b1-4699-90ed-6c76ab293581
20/08/09 12:57:00 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 12:57:00 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 12:57:01 INFO util.log: Logging initialized @2753ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 12:57:01 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 12:57:01 INFO server.Server: Started @2842ms
20/08/09 12:57:01 INFO server.AbstractConnector: Started ServerConnector@5095fad9{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 12:57:01 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 12:57:01 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:44664/jars/array.jar with timestamp 1597003021245
20/08/09 12:57:01 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:44664/jars/test.jar with timestamp 1597003021246
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 12:57:01 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 31 ms (0 ms spent in bootstraps)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809125701-0012
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 45267.
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 12:57:01 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:45267
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809125701-0012/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809125701-0012/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 12:57:01 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 12:57:01 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 45267, None)
20/08/09 12:57:01 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:45267 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 45267, None)
20/08/09 12:57:01 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 45267, None)
20/08/09 12:57:01 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 45267, None)
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/0 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/5 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/6 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/2 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/3 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/4 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/1 is now RUNNING
20/08/09 12:57:01 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809125701-0012/7 is now RUNNING
20/08/09 12:57:01 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 12:57:01 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
20/08/09 13:06:34 ERROR scheduler.TaskSetManager: Task 1 in stage 20.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 20.0 failed 4 times, most recent failure: Lost task 1.3 in stage 20.0 (TID 58, 198.202.113.161, executor 5): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
*** MLlib Add cores=24 n=35760 N=1000 9.53 GB 132.570 secs
20/08/09 13:08:35 ERROR scheduler.TaskSetManager: Task 1 in stage 22.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 22.0 failed 4 times, most recent failure: Lost task 1.3 in stage 22.0 (TID 70, 198.202.113.161, executor 5): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 13:09:49 ERROR scheduler.TaskSetManager: Task 0 in stage 25.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 25.0 failed 4 times, most recent failure: Lost task 0.3 in stage 25.0 (TID 81, 198.202.113.161, executor 5): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 13:11:34 ERROR scheduler.TaskSetManager: Task 1 in stage 28.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 28.0 failed 4 times, most recent failure: Lost task 1.3 in stage 28.0 (TID 97, 198.202.112.163, executor 7): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 13:12:34 ERROR scheduler.TaskSetManager: Task 1 in stage 32.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 32.0 failed 4 times, most recent failure: Lost task 1.3 in stage 32.0 (TID 110, 198.202.113.161, executor 5): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
*** DIABLO Add cores=24 n=35760 N=1000 9.53 GB 89.976 secs
20/08/09 13:12:37 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 13:12:38 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 13:12:38 INFO resource.ResourceUtils: ==============================================================
20/08/09 13:12:38 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 13:12:38 INFO resource.ResourceUtils: ==============================================================
20/08/09 13:12:38 INFO spark.SparkContext: Submitted application: tiles
20/08/09 13:12:38 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 13:12:38 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 13:12:38 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 13:12:38 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 13:12:38 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 13:12:38 INFO util.Utils: Successfully started service 'sparkDriver' on port 32901.
20/08/09 13:12:38 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 13:12:38 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 13:12:38 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 13:12:38 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 13:12:38 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 13:12:38 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-ca2b90d1-b12e-45ff-aba9-8c1c3117a5d7
20/08/09 13:12:38 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 13:12:38 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 13:12:39 INFO util.log: Logging initialized @3544ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 13:12:39 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 13:12:39 INFO server.Server: Started @3631ms
20/08/09 13:12:39 INFO server.AbstractConnector: Started ServerConnector@394ac413{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 13:12:39 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 13:12:39 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:32901/jars/array.jar with timestamp 1597003959259
20/08/09 13:12:39 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:32901/jars/test.jar with timestamp 1597003959259
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 13:12:39 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809131239-0013
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 13:12:39 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 32790.
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 13:12:39 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:32790
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809131239-0013/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809131239-0013/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 13:12:39 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 13:12:39 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 32790, None)
20/08/09 13:12:39 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:32790 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 32790, None)
20/08/09 13:12:39 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 32790, None)
20/08/09 13:12:39 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 32790, None)
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/6 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/5 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/2 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/0 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/1 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/7 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/3 is now RUNNING
20/08/09 13:12:39 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809131239-0013/4 is now RUNNING
20/08/09 13:12:39 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 13:12:39 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Multiply cores=24 n=7152 N=1000 0.38 GB 271.748 secs
*** DIABLO groupBy Multiply cores=24 n=7152 N=1000 0.38 GB 583.012 secs
*** DIABLO groupByJoin Multiply cores=24 n=7152 N=1000 0.38 GB 52.168 secs
20/08/09 14:13:14 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 14:13:15 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 14:13:15 INFO resource.ResourceUtils: ==============================================================
20/08/09 14:13:15 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 14:13:15 INFO resource.ResourceUtils: ==============================================================
20/08/09 14:13:15 INFO spark.SparkContext: Submitted application: tiles
20/08/09 14:13:15 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 14:13:15 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 14:13:15 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 14:13:15 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 14:13:15 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 14:13:15 INFO util.Utils: Successfully started service 'sparkDriver' on port 34572.
20/08/09 14:13:15 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 14:13:15 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 14:13:15 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 14:13:15 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 14:13:15 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 14:13:15 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-941d6609-2370-461f-9d43-a91c137b41e2
20/08/09 14:13:15 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 14:13:15 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 14:13:16 INFO util.log: Logging initialized @2459ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 14:13:16 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 14:13:16 INFO server.Server: Started @2547ms
20/08/09 14:13:16 INFO server.AbstractConnector: Started ServerConnector@67b85bcd{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 14:13:16 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 14:13:16 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:34572/jars/array.jar with timestamp 1597007596287
20/08/09 14:13:16 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:34572/jars/test.jar with timestamp 1597007596288
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 14:13:16 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 34 ms (0 ms spent in bootstraps)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809141316-0014
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 14:13:16 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 39024.
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:39024
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809141316-0014/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809141316-0014/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 14:13:16 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 14:13:16 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 14:13:16 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:39024 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 14:13:16 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 14:13:16 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 39024, None)
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/0 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/7 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/4 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/6 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/2 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/3 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/1 is now RUNNING
20/08/09 14:13:16 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809141316-0014/5 is now RUNNING
20/08/09 14:13:16 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 14:13:16 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** DIABLO groupByJoin Multiply cores=24 n=17880 N=1000 2.38 GB 661.781 secs
20/08/09 14:57:41 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 14:57:42 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 14:57:42 INFO resource.ResourceUtils: ==============================================================
20/08/09 14:57:42 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 14:57:42 INFO resource.ResourceUtils: ==============================================================
20/08/09 14:57:42 INFO spark.SparkContext: Submitted application: tiles
20/08/09 14:57:42 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 14:57:42 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 14:57:42 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 14:57:42 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 14:57:42 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 14:57:42 INFO util.Utils: Successfully started service 'sparkDriver' on port 40397.
20/08/09 14:57:42 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 14:57:42 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 14:57:42 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 14:57:42 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 14:57:42 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 14:57:42 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-33dbad2d-dd4a-4dac-b599-75a7e9856fd8
20/08/09 14:57:42 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 14:57:42 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 14:57:43 INFO util.log: Logging initialized @2973ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 14:57:43 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 14:57:43 INFO server.Server: Started @3062ms
20/08/09 14:57:43 INFO server.AbstractConnector: Started ServerConnector@74fef3f7{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 14:57:43 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 14:57:43 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:40397/jars/array.jar with timestamp 1597010263295
20/08/09 14:57:43 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:40397/jars/test.jar with timestamp 1597010263295
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 14:57:43 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 30 ms (0 ms spent in bootstraps)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809145743-0015
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 14:57:43 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 35535.
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 14:57:43 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:35535
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809145743-0015/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809145743-0015/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 14:57:43 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 14:57:43 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 35535, None)
20/08/09 14:57:43 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:35535 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 35535, None)
20/08/09 14:57:43 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 35535, None)
20/08/09 14:57:43 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 35535, None)
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/2 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/3 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/0 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/4 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/5 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/7 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/1 is now RUNNING
20/08/09 14:57:43 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809145743-0015/6 is now RUNNING
20/08/09 14:57:43 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 14:57:43 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Factorization cores=24 n=17880 m=17880 d=1000 N=1000 2.38 GB 553.397 secs
Exception in thread "main" org.apache.spark.SparkException: Job aborted due to stage failure: ShuffleMapStage 2086 (flatMap at factorization.scala:95) has failed the maximum allowable number of times: 4. Most recent failure reason: org.apache.spark.shuffle.FetchFailedException: No space left on device 	at org.apache.spark.storage.ShuffleBlockFetcherIterator.throwFetchFailedException(ShuffleBlockFetcherIterator.scala:748) 	at org.apache.spark.storage.ShuffleBlockFetcherIterator.next(ShuffleBlockFetcherIterator.scala:663) 	at org.apache.spark.storage.ShuffleBlockFetcherIterator.next(ShuffleBlockFetcherIterator.scala:70) 	at org.apache.spark.util.CompletionIterator.next(CompletionIterator.scala:29) 	at scala.collection.Iterator$$anon$11.nextCur(Iterator.scala:484) 	at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:490) 	at scala.collection.Iterator$$anon$10.hasNext(Iterator.scala:458) 	at org.apache.spark.util.CompletionIterator.hasNext(CompletionIterator.scala:31) 	at org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37) 	at scala.collection.Iterator$$anon$10.hasNext(Iterator.scala:458) 	at org.apache.spark.util.collection.ExternalAppendOnlyMap.insertAll(ExternalAppendOnlyMap.scala:155) 	at org.apache.spark.rdd.CoGroupedRDD.$anonfun$compute$4(CoGroupedRDD.scala:155) 	at org.apache.spark.rdd.CoGroupedRDD.$anonfun$compute$4$adapted(CoGroupedRDD.scala:154) 	at scala.collection.TraversableLike$WithFilter.$anonfun$foreach$1(TraversableLike.scala:877) 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62) 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55) 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49) 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:876) 	at org.apache.spark.rdd.CoGroupedRDD.compute(CoGroupedRDD.scala:154) 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:349) 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:313) 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:349) 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:313) 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:349) 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:313) 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:349) 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:313) 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:349) 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:313) 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:349) 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:313) 	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59) 	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99) 	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52) 	at org.apache.spark.scheduler.Task.run(Task.scala:127) 	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444) 	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377) 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at java.lang.Thread.run(Thread.java:748) Caused by: java.io.IOException: No space left on device 	at sun.nio.ch.FileDispatcherImpl.write0(Native Method) 	at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60) 	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) 	at sun.nio.ch.IOUtil.write(IOUtil.java:51) 	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:211) 	at org.apache.spark.network.shuffle.SimpleDownloadFile$SimpleDownloadWritableChannel.write(SimpleDownloadFile.java:78) 	at org.apache.spark.network.shuffle.OneForOneBlockFetcher$DownloadCallback.onData(OneForOneBlockFetcher.java:239) 	at org.apache.spark.network.client.StreamInterceptor.handle(StreamInterceptor.java:79) 	at org.apache.spark.network.util.TransportFrameDecoder.feedInterceptor(TransportFrameDecoder.java:263) 	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:87) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) 	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) 	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163) 	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576) 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493) 	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) 	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) 	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) 	... 1 more 
	at org.apache.spark.scheduler.DAGScheduler.failJobAndIndependentStages(DAGScheduler.scala:2023)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$abortStage$2(DAGScheduler.scala:1972)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$abortStage$2$adapted(DAGScheduler.scala:1971)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1971)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskCompletion(DAGScheduler.scala:1578)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2200)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2152)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2141)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:752)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2093)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2114)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2133)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2158)
	at org.apache.spark.rdd.RDD.count(RDD.scala:1227)
	at Factorization$.testFactorizationDiablo$1(factorization.scala:105)
	at Factorization$.$anonfun$main$53(factorization.scala:117)
	at Factorization$.$anonfun$main$51(factorization.scala:111)
	at scala.runtime.java8.JFunction1$mcDI$sp.apply(JFunction1$mcDI$sp.java:23)
	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:238)
	at scala.collection.immutable.Range.foreach(Range.scala:158)
	at scala.collection.TraversableLike.map(TraversableLike.scala:238)
	at scala.collection.TraversableLike.map$(TraversableLike.scala:231)
	at scala.collection.AbstractTraversable.map(Traversable.scala:108)
	at Factorization$.test$1(factorization.scala:111)
	at Factorization$.main(factorization.scala:117)
	at Factorization.main(factorization.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52)
	at org.apache.spark.deploy.SparkSubmit.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:928)
	at org.apache.spark.deploy.SparkSubmit.doRunMain$1(SparkSubmit.scala:180)
	at org.apache.spark.deploy.SparkSubmit.submit(SparkSubmit.scala:203)
	at org.apache.spark.deploy.SparkSubmit.doSubmit(SparkSubmit.scala:90)
	at org.apache.spark.deploy.SparkSubmit$$anon$2.doSubmit(SparkSubmit.scala:1007)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:1016)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
20/08/09 15:56:25 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 15:56:25 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 15:56:26 INFO resource.ResourceUtils: ==============================================================
20/08/09 15:56:26 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 15:56:26 INFO resource.ResourceUtils: ==============================================================
20/08/09 15:56:26 INFO spark.SparkContext: Submitted application: tiles
20/08/09 15:56:26 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 15:56:26 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 15:56:26 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 15:56:26 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 15:56:26 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 15:56:26 INFO util.Utils: Successfully started service 'sparkDriver' on port 34244.
20/08/09 15:56:26 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 15:56:26 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 15:56:26 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 15:56:26 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 15:56:26 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 15:56:26 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-e53abd13-138f-443e-9092-7c004986ee96
20/08/09 15:56:26 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 15:56:26 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 15:56:26 INFO util.log: Logging initialized @2563ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 15:56:26 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 15:56:26 INFO server.Server: Started @2650ms
20/08/09 15:56:26 INFO server.AbstractConnector: Started ServerConnector@768976cd{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 15:56:26 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5395ea39{/jobs,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4905c46b{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5432050b{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/environment/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@773bd77b{/static,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@278f8425{/api,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a1c0752{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 15:56:26 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 15:56:26 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:34244/jars/array.jar with timestamp 1597013786808
20/08/09 15:56:26 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:34244/jars/test.jar with timestamp 1597013786808
20/08/09 15:56:26 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 15:56:26 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 31 ms (0 ms spent in bootstraps)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809155627-0016
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 15:56:27 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 44150.
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 15:56:27 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:44150
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809155627-0016/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809155627-0016/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 15:56:27 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 15:56:27 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 44150, None)
20/08/09 15:56:27 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:44150 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 44150, None)
20/08/09 15:56:27 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 44150, None)
20/08/09 15:56:27 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 44150, None)
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/6 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/7 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/4 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/5 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/2 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/1 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/0 is now RUNNING
20/08/09 15:56:27 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809155627-0016/3 is now RUNNING
20/08/09 15:56:27 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@37191ef0{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 15:56:27 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
20/08/09 16:05:18 ERROR scheduler.TaskSetManager: Task 1 in stage 17.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 17.0 failed 4 times, most recent failure: Lost task 1.3 in stage 17.0 (TID 48, 198.202.113.161, executor 4): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 16:06:54 ERROR scheduler.TaskSetManager: Task 1 in stage 20.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 20.0 failed 4 times, most recent failure: Lost task 1.3 in stage 20.0 (TID 62, 198.202.116.165, executor 2): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
*** MLlib Add cores=24 n=40000 N=1000 11.92 GB 143.378 secs
20/08/09 16:09:18 ERROR scheduler.TaskSetManager: Task 0 in stage 23.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 23.0 failed 4 times, most recent failure: Lost task 0.3 in stage 23.0 (TID 77, 198.202.116.165, executor 3): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 16:12:05 ERROR scheduler.TaskSetManager: Task 0 in stage 26.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 26.0 failed 4 times, most recent failure: Lost task 0.3 in stage 26.0 (TID 89, 198.202.119.159, executor 0): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 16:13:41 ERROR scheduler.TaskSetManager: Task 1 in stage 29.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 29.0 failed 4 times, most recent failure: Lost task 1.3 in stage 29.0 (TID 99, 198.202.116.165, executor 3): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
20/08/09 16:15:27 ERROR scheduler.TaskSetManager: Task 1 in stage 31.0 failed 4 times; aborting job
org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 31.0 failed 4 times, most recent failure: Lost task 1.3 in stage 31.0 (TID 111, 198.202.119.159, executor 1): java.io.IOException: No space left on device
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:326)
	at org.apache.spark.storage.TimeTrackingOutputStream.write(TimeTrackingOutputStream.java:59)
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)
	at net.jpountz.lz4.LZ4BlockOutputStream.flushBufferedData(LZ4BlockOutputStream.java:223)
	at net.jpountz.lz4.LZ4BlockOutputStream.write(LZ4BlockOutputStream.java:176)
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877)
	at java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(ObjectOutputStream.java:1915)
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1576)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:44)
	at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:134)
	at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:249)
	at org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:158)
	at org.apache.spark.shuffle.ShuffleWriteProcessor.write(ShuffleWriteProcessor.scala:59)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)
	at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:52)
	at org.apache.spark.scheduler.Task.run(Task.scala:127)
	at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:444)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1377)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
*** DIABLO Add cores=24 n=40000 N=1000 11.92 GB 128.102 secs
20/08/09 16:15:33 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 16:15:34 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 16:15:34 INFO resource.ResourceUtils: ==============================================================
20/08/09 16:15:34 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 16:15:34 INFO resource.ResourceUtils: ==============================================================
20/08/09 16:15:34 INFO spark.SparkContext: Submitted application: tiles
20/08/09 16:15:34 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 16:15:34 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 16:15:34 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 16:15:34 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 16:15:34 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 16:15:34 INFO util.Utils: Successfully started service 'sparkDriver' on port 38196.
20/08/09 16:15:34 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 16:15:34 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 16:15:34 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 16:15:34 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 16:15:34 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 16:15:34 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-980e69b5-fe4d-4706-95b2-ea757667a7d3
20/08/09 16:15:34 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 16:15:34 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 16:15:34 INFO util.log: Logging initialized @3595ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 16:15:34 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 16:15:34 INFO server.Server: Started @3685ms
20/08/09 16:15:34 INFO server.AbstractConnector: Started ServerConnector@68f15c9d{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 16:15:34 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 16:15:34 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 16:15:34 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:38196/jars/array.jar with timestamp 1597014934960
20/08/09 16:15:34 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:38196/jars/test.jar with timestamp 1597014934960
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 16:15:35 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 31 ms (0 ms spent in bootstraps)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809161535-0017
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 16:15:35 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 46325.
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 16:15:35 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:46325
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809161535-0017/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809161535-0017/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 16:15:35 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 16:15:35 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 46325, None)
20/08/09 16:15:35 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:46325 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 46325, None)
20/08/09 16:15:35 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 46325, None)
20/08/09 16:15:35 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 46325, None)
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/6 is now RUNNING
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/0 is now RUNNING
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/4 is now RUNNING
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/2 is now RUNNING
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/3 is now RUNNING
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/1 is now RUNNING
20/08/09 16:15:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809161535-0017/5 is now RUNNING
20/08/09 16:15:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 16:15:35 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Multiply cores=24 n=8000 N=1000 0.48 GB 272.266 secs
*** DIABLO groupBy Multiply cores=24 n=8000 N=1000 0.48 GB 693.456 secs
*** DIABLO groupByJoin Multiply cores=24 n=8000 N=1000 0.48 GB 48.180 secs
20/08/09 17:23:33 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 17:23:34 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 17:23:34 INFO resource.ResourceUtils: ==============================================================
20/08/09 17:23:34 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 17:23:34 INFO resource.ResourceUtils: ==============================================================
20/08/09 17:23:34 INFO spark.SparkContext: Submitted application: tiles
20/08/09 17:23:34 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 17:23:34 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 17:23:34 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 17:23:34 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 17:23:34 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 17:23:34 INFO util.Utils: Successfully started service 'sparkDriver' on port 37011.
20/08/09 17:23:34 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 17:23:34 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 17:23:34 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 17:23:34 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 17:23:34 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 17:23:34 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-4aa4b1db-e9bf-47d3-905b-b5952a04f739
20/08/09 17:23:34 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 17:23:34 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 17:23:35 INFO util.log: Logging initialized @11117ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 17:23:35 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 17:23:35 INFO server.Server: Started @11268ms
20/08/09 17:23:35 INFO server.AbstractConnector: Started ServerConnector@7e972128{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 17:23:35 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@43b0ade{/jobs,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7b44b63d{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@38499e48{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1136b469{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2b87581{/stages,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@42f22995{/stages/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@286b39c2{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6d467c87{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@57bd802b{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2c779e5{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5183d589{/storage,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@682c1e93{/storage/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@68e62ca4{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b78fdb1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@11653e3b{/environment,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1b9c1b51{/environment/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@16fe9c29{/executors,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4525d1d3{/executors/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1eea9d2d{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@bd2f5a9{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7808fb9{/static,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@34cf5a97{/,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@ddf20fd{/api,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6443b128{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@40021799{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 17:23:35 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:37011/jars/array.jar with timestamp 1597019015369
20/08/09 17:23:35 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:37011/jars/test.jar with timestamp 1597019015370
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 17:23:35 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 34 ms (0 ms spent in bootstraps)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809172335-0018
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 45000.
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809172335-0018/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 17:23:35 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:45000
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809172335-0018/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 17:23:35 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 17:23:35 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 45000, None)
20/08/09 17:23:35 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:45000 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 45000, None)
20/08/09 17:23:35 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 45000, None)
20/08/09 17:23:35 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 45000, None)
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/2 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/3 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/4 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/5 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/7 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/0 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/1 is now RUNNING
20/08/09 17:23:35 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809172335-0018/6 is now RUNNING
20/08/09 17:23:35 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2f1ea80d{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 17:23:35 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** DIABLO groupByJoin Multiply cores=24 n=20000 N=1000 2.98 GB 806.498 secs
20/08/09 18:17:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
20/08/09 18:17:40 INFO spark.SparkContext: Running Spark version 3.0.0
20/08/09 18:17:40 INFO resource.ResourceUtils: ==============================================================
20/08/09 18:17:40 INFO resource.ResourceUtils: Resources for spark.driver:

20/08/09 18:17:40 INFO resource.ResourceUtils: ==============================================================
20/08/09 18:17:40 INFO spark.SparkContext: Submitted application: tiles
20/08/09 18:17:40 INFO spark.SecurityManager: Changing view acls to: fegaras
20/08/09 18:17:40 INFO spark.SecurityManager: Changing modify acls to: fegaras
20/08/09 18:17:40 INFO spark.SecurityManager: Changing view acls groups to: 
20/08/09 18:17:40 INFO spark.SecurityManager: Changing modify acls groups to: 
20/08/09 18:17:40 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(fegaras); groups with view permissions: Set(); users  with modify permissions: Set(fegaras); groups with modify permissions: Set()
20/08/09 18:17:41 INFO util.Utils: Successfully started service 'sparkDriver' on port 40775.
20/08/09 18:17:41 INFO spark.SparkEnv: Registering MapOutputTracker
20/08/09 18:17:41 INFO spark.SparkEnv: Registering BlockManagerMaster
20/08/09 18:17:41 INFO storage.BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
20/08/09 18:17:41 INFO storage.BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
20/08/09 18:17:41 INFO spark.SparkEnv: Registering BlockManagerMasterHeartbeat
20/08/09 18:17:41 INFO storage.DiskBlockManager: Created local directory at /tmp/blockmgr-c476a8fb-de9c-42bc-bdfd-d1bb934e448d
20/08/09 18:17:41 INFO memory.MemoryStore: MemoryStore started with capacity 31.8 GiB
20/08/09 18:17:41 INFO spark.SparkEnv: Registering OutputCommitCoordinator
20/08/09 18:17:41 INFO util.log: Logging initialized @3052ms to org.sparkproject.jetty.util.log.Slf4jLog
20/08/09 18:17:41 INFO server.Server: jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_212-b04
20/08/09 18:17:41 INFO server.Server: Started @3138ms
20/08/09 18:17:41 INFO server.AbstractConnector: Started ServerConnector@74fef3f7{HTTP/1.1,[http/1.1]}{comet-10-17.ibnet:4040}
20/08/09 18:17:41 INFO util.Utils: Successfully started service 'SparkUI' on port 4040.
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4463d9d3{/jobs,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@c3fa05a{/jobs/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4a699efa{/jobs/job,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@17ae7628{/jobs/job/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6579c3d9{/stages,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@66434cc8{/stages/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@693e4d19{/stages/stage,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@1c12f3ee{/stages/stage/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@29182679{/stages/pool,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5cbb84b1{/stages/pool/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@6a84bc2a{/storage,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@511d5d04{/storage/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@27068a50{/storage/rdd,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5328a9c1{/storage/rdd/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@48bfb884{/environment,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@715fb77{/environment/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@2e52fb3e{/executors,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3e9803c2{/executors/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@7c974942{/executors/threadDump,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60921b21{/executors/threadDump/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@4d4960c8{/static,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3703bf3c{/,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5b3f3ba0{/api,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@3f36b447{/jobs/job/kill,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@5eeedb60{/stages/stage/kill,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO ui.SparkUI: Bound SparkUI to comet-10-17.ibnet, and started at http://comet-10-17.ibnet:4040
20/08/09 18:17:41 INFO spark.SparkContext: Added JAR file:///oasis/projects/nsf/uot143/fegaras/array/lib/array.jar at spark://comet-10-17.ibnet:40775/jars/array.jar with timestamp 1597022261480
20/08/09 18:17:41 INFO spark.SparkContext: Added JAR file:/oasis/projects/nsf/uot143/fegaras/array/tests/spark/test.jar at spark://comet-10-17.ibnet:40775/jars/test.jar with timestamp 1597022261480
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Connecting to master spark://comet-10-17.ibnet:7077...
20/08/09 18:17:41 INFO client.TransportClientFactory: Successfully created connection to comet-10-17.ibnet/10.22.253.174:7077 after 31 ms (0 ms spent in bootstraps)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20200809181741-0019
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/0 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/0 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/1 on worker-20200809090748-198.202.119.159-43432 (198.202.119.159:43432) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/1 on hostPort 198.202.119.159:43432 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/2 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/2 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/3 on worker-20200809090746-198.202.116.165-35644 (198.202.116.165:35644) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/3 on hostPort 198.202.116.165:35644 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/4 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/4 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO util.Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 41713.
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/5 on worker-20200809090746-198.202.113.161-35448 (198.202.113.161:35448) with 11 core(s)
20/08/09 18:17:41 INFO netty.NettyBlockTransferService: Server created on comet-10-17.ibnet:41713
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/5 on hostPort 198.202.113.161:35448 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/6 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/6 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor added: app-20200809181741-0019/7 on worker-20200809090747-198.202.112.163-46077 (198.202.112.163:46077) with 11 core(s)
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: Granted executor ID app-20200809181741-0019/7 on hostPort 198.202.112.163:46077 with 11 core(s), 60.0 GiB RAM
20/08/09 18:17:41 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
20/08/09 18:17:41 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, comet-10-17.ibnet, 41713, None)
20/08/09 18:17:41 INFO storage.BlockManagerMasterEndpoint: Registering block manager comet-10-17.ibnet:41713 with 31.8 GiB RAM, BlockManagerId(driver, comet-10-17.ibnet, 41713, None)
20/08/09 18:17:41 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, comet-10-17.ibnet, 41713, None)
20/08/09 18:17:41 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, comet-10-17.ibnet, 41713, None)
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/4 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/2 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/3 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/7 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/1 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/0 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/6 is now RUNNING
20/08/09 18:17:41 INFO client.StandaloneAppClient$ClientEndpoint: Executor updated: app-20200809181741-0019/5 is now RUNNING
20/08/09 18:17:41 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@62566842{/metrics/json,null,AVAILABLE,@Spark}
20/08/09 18:17:41 INFO cluster.StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
*** MLlib Factorization cores=24 n=20000 m=20000 d=1000 N=1000 2.98 GB 661.026 secs
slurmstepd: *** JOB 35191250 ON comet-10-17 CANCELLED AT 2020-08-09T19:07:18 DUE TO TIME LIMIT ***
Exception in thread "main" org.apache.spark.SparkException: Job 66 cancelled because SparkContext was shut down
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$cleanUpAfterSchedulerStop$1(DAGScheduler.scala:956)
	at org.apache.spark.scheduler.DAGScheduler.$anonfun$cleanUpAfterSchedulerStop$1$adapted(DAGScheduler.scala:954)
	at scala.collection.mutable.HashSet.foreach(HashSet.scala:79)
	at org.apache.spark.scheduler.DAGScheduler.cleanUpAfterSchedulerStop(DAGScheduler.scala:954)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onStop(DAGScheduler.scala:2221)
	at org.apache.spark.util.EventLoop.stop(EventLoop.scala:84)
	at org.apache.spark.scheduler.DAGScheduler.stop(DAGScheduler.scala:2134)
	at org.apache.spark.SparkContext.$anonfun$stop$12(SparkContext.scala:1967)
	at org.apache.spark.util.Utils$.tryLogNonFatalError(Utils.scala:1357)
	at org.apache.spark.SparkContext.stop(SparkContext.scala:1967)
	at org.apache.spark.SparkContext.$anonfun$new$35(SparkContext.scala:626)
	at org.apache.spark.util.SparkShutdownHook.run(ShutdownHookManager.scala:214)
	at org.apache.spark.util.SparkShutdownHookManager.$anonfun$runAll$2(ShutdownHookManager.scala:188)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1932)
	at org.apache.spark.util.SparkShutdownHookManager.$anonfun$runAll$1(ShutdownHookManager.scala:188)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at org.apache.spark.util.SparkShutdownHookManager.runAll(ShutdownHookManager.scala:188)
	at org.apache.spark.util.SparkShutdownHookManager$$anon$2.run(ShutdownHookManager.scala:178)
	at org.apache.hadoop.util.ShutdownHookManager$1.run(ShutdownHookManager.java:54)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:752)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2093)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2114)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2133)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2158)
	at org.apache.spark.rdd.RDD.count(RDD.scala:1227)
	at Factorization$.testFactorizationDiablo$1(factorization.scala:105)
	at Factorization$.$anonfun$main$53(factorization.scala:117)
	at Factorization$.$anonfun$main$51(factorization.scala:111)
	at scala.runtime.java8.JFunction1$mcDI$sp.apply(JFunction1$mcDI$sp.java:23)
	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:238)
	at scala.collection.immutable.Range.foreach(Range.scala:158)
	at scala.collection.TraversableLike.map(TraversableLike.scala:238)
	at scala.collection.TraversableLike.map$(TraversableLike.scala:231)
	at scala.collection.AbstractTraversable.map(Traversable.scala:108)
	at Factorization$.test$1(factorization.scala:111)
	at Factorization$.main(factorization.scala:117)
	at Factorization.main(factorization.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52)
	at org.apache.spark.deploy.SparkSubmit.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:928)
	at org.apache.spark.deploy.SparkSubmit.doRunMain$1(SparkSubmit.scala:180)
	at org.apache.spark.deploy.SparkSubmit.submit(SparkSubmit.scala:203)
	at org.apache.spark.deploy.SparkSubmit.doSubmit(SparkSubmit.scala:90)
	at org.apache.spark.deploy.SparkSubmit$$anon$2.doSubmit(SparkSubmit.scala:1007)
	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:1016)
	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)
